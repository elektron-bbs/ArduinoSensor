
C:\Users\UB\AppData\Local\Temp\arduino_build_506887/attiny_demo_Si7021.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
       2:	42 c0       	rjmp	.+132    	; 0x88 <__bad_interrupt>
       4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
       6:	40 c0       	rjmp	.+128    	; 0x88 <__bad_interrupt>
       8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
       a:	16 c4       	rjmp	.+2092   	; 0x838 <__vector_5>
       c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
       e:	c4 c3       	rjmp	.+1928   	; 0x798 <__vector_7>
      10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
      12:	3a c0       	rjmp	.+116    	; 0x88 <__bad_interrupt>
      14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
      16:	38 c0       	rjmp	.+112    	; 0x88 <__bad_interrupt>
      18:	ec c4       	rjmp	.+2520   	; 0x9f2 <__vector_12>
      1a:	d2 c4       	rjmp	.+2468   	; 0x9c0 <__vector_13>
      1c:	57 c4       	rjmp	.+2222   	; 0x8cc <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	01 02       	muls	r16, r17
      20:	00 00       	nop
      22:	04 00       	.word	0x0004	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <port_to_mode_PGM>:
      2a:	00 00 00 00 37 00                                   ....7.

00000030 <digital_pin_to_port_PGM>:
      30:	02 02 02 02 02 02                                   ......

00000036 <digital_pin_to_bit_mask_PGM>:
      36:	01 02 04 08 10 20                                   ..... 

0000003c <__ctors_start>:
__ctors_start():
      3c:	03 05       	cpc	r16, r3

0000003e <__ctors_end>:
__dtors_end():
      3e:	11 24       	eor	r1, r1
      40:	1f be       	out	0x3f, r1	; 63
      42:	cf e5       	ldi	r28, 0x5F	; 95
      44:	d2 e0       	ldi	r29, 0x02	; 2
      46:	de bf       	out	0x3e, r29	; 62
      48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      4a:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      4c:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      4e:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      50:	e2 e7       	ldi	r30, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      52:	f2 e1       	ldi	r31, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      54:	02 c0       	rjmp	.+4      	; 0x5a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      56:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      58:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      5a:	a2 38       	cpi	r26, 0x82	; 130
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      5c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      5e:	d9 f7       	brne	.-10     	; 0x56 <__do_copy_data+0xc>

00000060 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      60:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      62:	a2 e8       	ldi	r26, 0x82	; 130
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      64:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      6a:	a1 32       	cpi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      6c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      70:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      72:	cf e1       	ldi	r28, 0x1F	; 31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      74:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      76:	03 c0       	rjmp	.+6      	; 0x7e <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      78:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      7a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      7c:	b2 d7       	rcall	.+3940   	; 0xfe2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      7e:	ce 31       	cpi	r28, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      80:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      82:	d1 f7       	brne	.-12     	; 0x78 <__do_global_ctors+0x8>
      84:	e7 d4       	rcall	.+2510   	; 0xa54 <main>
      86:	f3 c8       	rjmp	.-3610   	; 0xfffff26e <__eeprom_end+0xff7ef26e>

00000088 <__bad_interrupt>:
__vector_1():
      88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <pinMode.constprop.10>:
pinMode.constprop.10():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:32

#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
      8a:	cf 93       	push	r28
      8c:	df 93       	push	r29
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:35
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
      8e:	e9 e3       	ldi	r30, 0x39	; 57
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	94 91       	lpm	r25, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
      94:	e3 e3       	ldi	r30, 0x33	; 51
      96:	f0 e0       	ldi	r31, 0x00	; 0
      98:	24 91       	lpm	r18, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
      9a:	22 23       	and	r18, r18
      9c:	d1 f0       	breq	.+52     	; 0xd2 <pinMode.constprop.10+0x48>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
      9e:	30 e0       	ldi	r19, 0x00	; 0
      a0:	22 0f       	add	r18, r18
      a2:	33 1f       	adc	r19, r19
      a4:	f9 01       	movw	r30, r18
      a6:	e6 5d       	subi	r30, 0xD6	; 214
      a8:	ff 4f       	sbci	r31, 0xFF	; 255
      aa:	a5 91       	lpm	r26, Z+
      ac:	b4 91       	lpm	r27, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
      ae:	f9 01       	movw	r30, r18
      b0:	ec 5d       	subi	r30, 0xDC	; 220
      b2:	ff 4f       	sbci	r31, 0xFF	; 255
      b4:	c5 91       	lpm	r28, Z+
      b6:	d4 91       	lpm	r29, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
      b8:	81 11       	cpse	r24, r1
      ba:	0e c0       	rjmp	.+28     	; 0xd8 <pinMode.constprop.10+0x4e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
      bc:	2f b7       	in	r18, 0x3f	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:46
                cli();
      be:	f8 94       	cli
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
      c0:	8c 91       	ld	r24, X
      c2:	e9 2f       	mov	r30, r25
      c4:	e0 95       	com	r30
      c6:	8e 23       	and	r24, r30
      c8:	8c 93       	st	X, r24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
      ca:	98 81       	ld	r25, Y
      cc:	e9 23       	and	r30, r25
      ce:	e8 83       	st	Y, r30
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:49
    SREG = oldSREG;
      d0:	2f bf       	out	0x3f, r18	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
      d2:	df 91       	pop	r29
      d4:	cf 91       	pop	r28
      d6:	08 95       	ret
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
      d8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:58
                cli();
      da:	f8 94       	cli
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:59
    *reg |= bit;
      dc:	ec 91       	ld	r30, X
      de:	e9 2b       	or	r30, r25
      e0:	ec 93       	st	X, r30
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
      e2:	8f bf       	out	0x3f, r24	; 63
      e4:	f6 cf       	rjmp	.-20     	; 0xd2 <pinMode.constprop.10+0x48>

000000e6 <TinySoftwareSerial::flush()>:
_ZN18TinySoftwareSerial5flushEv():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:237
}

void TinySoftwareSerial::flush()
{

}
      e6:	08 95       	ret

000000e8 <TinySoftwareSerial::write(unsigned char)>:
_ZN18TinySoftwareSerial5writeEh():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:197
  }
}

size_t TinySoftwareSerial::write(uint8_t ch)
{
  uint8_t oldSREG = SREG;
      e8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:198
  cli(); //Prevent interrupts from breaking the transmission. Note: TinySoftwareSerial is half duplex.
      ea:	f8 94       	cli
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:229
      [uartMask] "r" (_txmask),
      [uartUnmask] "r" (_txunmask)
  : "r23",
    "r24",
    "r25"
  );
      ec:	fc 01       	movw	r30, r24
      ee:	45 85       	ldd	r20, Z+13	; 0x0d
      f0:	56 85       	ldd	r21, Z+14	; 0x0e
      f2:	3a e0       	ldi	r19, 0x0A	; 10
      f4:	60 95       	com	r22
      f6:	08 94       	sec
      f8:	20 f4       	brcc	.+8      	; 0x102 <TinySoftwareSerial::write(unsigned char)+0x1a>
      fa:	78 b3       	in	r23, 0x18	; 24
      fc:	75 23       	and	r23, r21
      fe:	78 bb       	out	0x18, r23	; 24
     100:	04 c0       	rjmp	.+8      	; 0x10a <TinySoftwareSerial::write(unsigned char)+0x22>
     102:	78 b3       	in	r23, 0x18	; 24
     104:	74 2b       	or	r23, r20
     106:	78 bb       	out	0x18, r23	; 24
     108:	00 00       	nop
     10a:	90 d3       	rcall	.+1824   	; 0x82c <uartDelay>
     10c:	8f d3       	rcall	.+1822   	; 0x82c <uartDelay>
     10e:	8e d3       	rcall	.+1820   	; 0x82c <uartDelay>
     110:	8d d3       	rcall	.+1818   	; 0x82c <uartDelay>
     112:	66 95       	lsr	r22
     114:	3a 95       	dec	r19
     116:	81 f7       	brne	.-32     	; 0xf8 <TinySoftwareSerial::write(unsigned char)+0x10>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:230
  SREG = oldSREG;
     118:	2f bf       	out	0x3f, r18	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:232
  return 1;
}
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret

00000120 <TinySoftwareSerial::read()>:
_ZN18TinySoftwareSerial4readEv():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:186
}

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     120:	dc 01       	movw	r26, r24
     122:	1f 96       	adiw	r26, 0x0f	; 15
     124:	ed 91       	ld	r30, X+
     126:	fc 91       	ld	r31, X
     128:	22 a1       	ldd	r18, Z+34	; 0x22
     12a:	33 a1       	ldd	r19, Z+35	; 0x23
     12c:	80 a1       	ldd	r24, Z+32	; 0x20
     12e:	91 a1       	ldd	r25, Z+33	; 0x21
     130:	82 17       	cp	r24, r18
     132:	93 07       	cpc	r25, r19
     134:	61 f0       	breq	.+24     	; 0x14e <TinySoftwareSerial::read()+0x2e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:189
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     136:	df 01       	movw	r26, r30
     138:	a2 0f       	add	r26, r18
     13a:	b3 1f       	adc	r27, r19
     13c:	8c 91       	ld	r24, X
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:190
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	2f 71       	andi	r18, 0x1F	; 31
     144:	33 27       	eor	r19, r19
     146:	33 a3       	std	Z+35, r19	; 0x23
     148:	22 a3       	std	Z+34, r18	; 0x22
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:191
    return c;
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:187

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:193
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     152:	08 95       	ret

00000154 <TinySoftwareSerial::peek()>:
_ZN18TinySoftwareSerial4peekEv():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:176
  }
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     154:	dc 01       	movw	r26, r24
     156:	1f 96       	adiw	r26, 0x0f	; 15
     158:	ed 91       	ld	r30, X+
     15a:	fc 91       	ld	r31, X
     15c:	82 a1       	ldd	r24, Z+34	; 0x22
     15e:	93 a1       	ldd	r25, Z+35	; 0x23
     160:	20 a1       	ldd	r18, Z+32	; 0x20
     162:	31 a1       	ldd	r19, Z+33	; 0x21
     164:	28 17       	cp	r18, r24
     166:	39 07       	cpc	r19, r25
     168:	29 f0       	breq	.+10     	; 0x174 <TinySoftwareSerial::peek()+0x20>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:179
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     16a:	e8 0f       	add	r30, r24
     16c:	f9 1f       	adc	r31, r25
     16e:	80 81       	ld	r24, Z
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	08 95       	ret
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:177
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     174:	8f ef       	ldi	r24, 0xFF	; 255
     176:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:181
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     178:	08 95       	ret

0000017a <TinySoftwareSerial::available()>:
_ZN18TinySoftwareSerial9availableEv():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:157
  _rx_buffer->head = _rx_buffer->tail;
}

int TinySoftwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     17a:	dc 01       	movw	r26, r24
     17c:	1f 96       	adiw	r26, 0x0f	; 15
     17e:	ed 91       	ld	r30, X+
     180:	fc 91       	ld	r31, X
     182:	80 a1       	ldd	r24, Z+32	; 0x20
     184:	91 a1       	ldd	r25, Z+33	; 0x21
     186:	22 a1       	ldd	r18, Z+34	; 0x22
     188:	33 a1       	ldd	r19, Z+35	; 0x23
     18a:	82 1b       	sub	r24, r18
     18c:	93 0b       	sbc	r25, r19
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:158
}
     18e:	8f 71       	andi	r24, 0x1F	; 31
     190:	99 27       	eor	r25, r25
     192:	08 95       	ret

00000194 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	6c 01       	movw	r12, r24
     1a6:	eb 01       	movw	r28, r22
     1a8:	7b 01       	movw	r14, r22
     1aa:	e4 0e       	add	r14, r20
     1ac:	f5 1e       	adc	r15, r21
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/Print.cpp:35
  size_t n = 0;
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/Print.cpp:36
  while (size--) {
     1b2:	ce 15       	cp	r28, r14
     1b4:	df 05       	cpc	r29, r15
     1b6:	61 f0       	breq	.+24     	; 0x1d0 <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     1b8:	69 91       	ld	r22, Y+
     1ba:	d6 01       	movw	r26, r12
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	01 90       	ld	r0, Z+
     1c2:	f0 81       	ld	r31, Z
     1c4:	e0 2d       	mov	r30, r0
     1c6:	c6 01       	movw	r24, r12
     1c8:	09 95       	icall
     1ca:	08 0f       	add	r16, r24
     1cc:	19 1f       	adc	r17, r25
     1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/Print.cpp:40
  }
  return n;
}
     1d0:	c8 01       	movw	r24, r16
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	df 90       	pop	r13
     1e0:	cf 90       	pop	r12
     1e2:	08 95       	ret

000001e4 <digitalWrite>:
digitalWrite():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:137
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     1e4:	87 ff       	sbrs	r24, 7
     1e6:	09 c0       	rjmp	.+18     	; 0x1fa <digitalWrite+0x16>
     1e8:	8f 77       	andi	r24, 0x7F	; 127
     1ea:	71 f1       	breq	.+92     	; 0x248 <digitalWrite+0x64>
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	71 f1       	breq	.+92     	; 0x24c <digitalWrite+0x68>
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	71 f1       	breq	.+92     	; 0x250 <digitalWrite+0x6c>
     1f4:	83 30       	cpi	r24, 0x03	; 3
     1f6:	71 f1       	breq	.+92     	; 0x254 <digitalWrite+0x70>
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:138
  uint8_t timer = digitalPinToTimer(pin);
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	fc 01       	movw	r30, r24
     1fe:	e2 5e       	subi	r30, 0xE2	; 226
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	34 91       	lpm	r19, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     204:	fc 01       	movw	r30, r24
     206:	ea 5c       	subi	r30, 0xCA	; 202
     208:	ff 4f       	sbci	r31, 0xFF	; 255
     20a:	24 91       	lpm	r18, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     20c:	fc 01       	movw	r30, r24
     20e:	e0 5d       	subi	r30, 0xD0	; 208
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	e4 91       	lpm	r30, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     214:	ee 23       	and	r30, r30
     216:	b9 f0       	breq	.+46     	; 0x246 <digitalWrite+0x62>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     218:	33 23       	and	r19, r19
     21a:	29 f0       	breq	.+10     	; 0x226 <digitalWrite+0x42>
turnOffPWM():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     21c:	31 30       	cpi	r19, 0x01	; 1
     21e:	e1 f4       	brne	.+56     	; 0x258 <digitalWrite+0x74>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     220:	8a b5       	in	r24, 0x2a	; 42
     222:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     224:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	ee 0f       	add	r30, r30
     22a:	ff 1f       	adc	r31, r31
     22c:	ec 5d       	subi	r30, 0xDC	; 220
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	a5 91       	lpm	r26, Z+
     232:	b4 91       	lpm	r27, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:152

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     234:	8f b7       	in	r24, 0x3f	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:151
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     236:	61 11       	cpse	r22, r1
     238:	20 c0       	rjmp	.+64     	; 0x27a <__stack+0x1b>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:153
    uint8_t oldSREG = SREG;
    cli();
     23a:	f8 94       	cli
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:154
    *out &= ~bit;
     23c:	ec 91       	ld	r30, X
     23e:	20 95       	com	r18
     240:	2e 23       	and	r18, r30
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     242:	2c 93       	st	X, r18
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
     244:	8f bf       	out	0x3f, r24	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:162
  }
}
     246:	08 95       	ret
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:137
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	d7 cf       	rjmp	.-82     	; 0x1fa <digitalWrite+0x16>
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	d5 cf       	rjmp	.-86     	; 0x1fa <digitalWrite+0x16>
     250:	84 e0       	ldi	r24, 0x04	; 4
     252:	d3 cf       	rjmp	.-90     	; 0x1fa <digitalWrite+0x16>
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	d1 cf       	rjmp	.-94     	; 0x1fa <digitalWrite+0x16>
turnOffPWM():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     258:	32 30       	cpi	r19, 0x02	; 2
     25a:	19 f4       	brne	.+6      	; 0x262 <__stack+0x3>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     25c:	8a b5       	in	r24, 0x2a	; 42
     25e:	8f 7d       	andi	r24, 0xDF	; 223
     260:	e1 cf       	rjmp	.-62     	; 0x224 <digitalWrite+0x40>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
     262:	33 30       	cpi	r19, 0x03	; 3
     264:	21 f4       	brne	.+8      	; 0x26e <__stack+0xf>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
     266:	80 b7       	in	r24, 0x30	; 48
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	80 bf       	out	0x30, r24	; 48
     26c:	dc cf       	rjmp	.-72     	; 0x226 <digitalWrite+0x42>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
     26e:	34 30       	cpi	r19, 0x04	; 4
     270:	d1 f6       	brne	.-76     	; 0x226 <digitalWrite+0x42>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
     272:	8c b5       	in	r24, 0x2c	; 44
     274:	8f 7d       	andi	r24, 0xDF	; 223
     276:	8c bd       	out	0x2c, r24	; 44
     278:	d6 cf       	rjmp	.-84     	; 0x226 <digitalWrite+0x42>
digitalWrite():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:158
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     27a:	f8 94       	cli
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_digital.c:159
    *out |= bit;
     27c:	ec 91       	ld	r30, X
     27e:	2e 2b       	or	r18, r30
     280:	e0 cf       	rjmp	.-64     	; 0x242 <digitalWrite+0x5e>

00000282 <delayMicroseconds>:
delayMicroseconds():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:458

  #else
    // for the 1 MHz internal clock (default settings for common AVR microcontrollers)
    // the overhead of the function calls is 14 (16) cycles
    if (us <= 16) return; //= 3 cycles, (4 when true)
    if (us <= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to subtract 22)
     282:	8a 31       	cpi	r24, 0x1A	; 26
     284:	91 05       	cpc	r25, r1
     286:	38 f0       	brcs	.+14     	; 0x296 <delayMicroseconds+0x14>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:461

    // compensate for the time taken by the preceding and next commands (about 22 cycles)
    us -= 22; // = 2 cycles
     288:	46 97       	sbiw	r24, 0x16	; 22
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:465
    // the following loop takes 4 microseconds (4 cycles)
    // per iteration, so execute it us/4 times
    // us is at least 4, divided by 4 gives us 1 (no zero delay bug)
    us >>= 2; // us div 4, = 4 cycles
     28a:	96 95       	lsr	r25
     28c:	87 95       	ror	r24
     28e:	96 95       	lsr	r25
     290:	87 95       	ror	r24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:469
  #endif

  // busy wait
  __asm__ __volatile__ (
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delayMicroseconds+0x10>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:474
    "1: sbiw %0,1" "\n\t" // 2 cycles
    "brne 1b" : "=w" (us) : "0" (us) // 2 cycles
  );
  // return = 4 cycles
}
     296:	08 95       	ret

00000298 <micros>:
micros():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:174
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     298:	3f b7       	in	r19, 0x3f	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:176

    cli();
     29a:	f8 94       	cli
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:177
    m = millis_timer_overflow_count;
     29c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <millis_timer_overflow_count>
     2a0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <millis_timer_overflow_count+0x1>
     2a4:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <millis_timer_overflow_count+0x2>
     2a8:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <millis_timer_overflow_count+0x3>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:179
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     2ac:	22 b7       	in	r18, 0x32	; 50
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:194

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     2ae:	08 b6       	in	r0, 0x38	; 56
     2b0:	01 fe       	sbrs	r0, 1
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <micros+0x26>
     2b4:	2f 3f       	cpi	r18, 0xFF	; 255
     2b6:	19 f0       	breq	.+6      	; 0x2be <micros+0x26>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:195
      m++;
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	a1 1d       	adc	r26, r1
     2bc:	b1 1d       	adc	r27, r1
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:204
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     2be:	3f bf       	out	0x3f, r19	; 63
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:211

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     2c0:	ba 2f       	mov	r27, r26
     2c2:	a9 2f       	mov	r26, r25
     2c4:	98 2f       	mov	r25, r24
     2c6:	88 27       	eor	r24, r24
     2c8:	bc 01       	movw	r22, r24
     2ca:	cd 01       	movw	r24, r26
     2cc:	62 0f       	add	r22, r18
     2ce:	71 1d       	adc	r23, r1
     2d0:	81 1d       	adc	r24, r1
     2d2:	91 1d       	adc	r25, r1
     2d4:	43 e0       	ldi	r20, 0x03	; 3
     2d6:	66 0f       	add	r22, r22
     2d8:	77 1f       	adc	r23, r23
     2da:	88 1f       	adc	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	4a 95       	dec	r20
     2e0:	d1 f7       	brne	.-12     	; 0x2d6 <micros+0x3e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:256
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     2e2:	08 95       	ret

000002e4 <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
     2e4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <TWI_RxTail>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
     2e8:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <TWI_RxHead>
     2ec:	89 1b       	sub	r24, r25
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:138
}
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	08 95       	ret

000002f2 <setup_watchdog(int)>:
_Z14setup_watchdogi():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:256
#endif
}

// 0=16ms, 1=32ms,2=64ms,3=128ms,4=250ms,5=500ms
// 6=1 sec,7=2 sec, 8=4 sec, 9= 8sec
void setup_watchdog(int ii) {
     2f2:	9c 01       	movw	r18, r24
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:257
  cli();
     2f4:	f8 94       	cli
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:261
  //  wdt_reset();
  byte bb;
  // int ww;
  if (ii > 9 ) ii = 9;
     2f6:	8a 30       	cpi	r24, 0x0A	; 10
     2f8:	91 05       	cpc	r25, r1
     2fa:	94 f4       	brge	.+36     	; 0x320 <setup_watchdog(int)+0x2e>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:262
  bb = ii & 7;
     2fc:	98 2f       	mov	r25, r24
     2fe:	97 70       	andi	r25, 0x07	; 7
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:263
  if (ii > 7) bb |= (1 << 5);
     300:	28 30       	cpi	r18, 0x08	; 8
     302:	31 05       	cpc	r19, r1
     304:	74 f4       	brge	.+28     	; 0x322 <setup_watchdog(int)+0x30>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:264
  bb |= (1 << WDCE);
     306:	90 61       	ori	r25, 0x10	; 16
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:266
  //  ww=bb;
  MCUSR &= ~(1 << WDRF);
     308:	84 b7       	in	r24, 0x34	; 52
     30a:	87 7f       	andi	r24, 0xF7	; 247
     30c:	84 bf       	out	0x34, r24	; 52
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:268
  // start timed sequence
  WDTCR |= (1 << WDCE) | (1 << WDE);
     30e:	81 b5       	in	r24, 0x21	; 33
     310:	88 61       	ori	r24, 0x18	; 24
     312:	81 bd       	out	0x21, r24	; 33
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:270
  // set new watchdog timeout value
  WDTCR = bb;
     314:	91 bd       	out	0x21, r25	; 33
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:271
  WDTCR |= _BV(WDIE);
     316:	81 b5       	in	r24, 0x21	; 33
     318:	80 64       	ori	r24, 0x40	; 64
     31a:	81 bd       	out	0x21, r24	; 33
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:272
  sei();
     31c:	78 94       	sei
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:273
}
     31e:	08 95       	ret
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:262
  cli();
  //  wdt_reset();
  byte bb;
  // int ww;
  if (ii > 9 ) ii = 9;
  bb = ii & 7;
     320:	91 e0       	ldi	r25, 0x01	; 1
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:263
  if (ii > 7) bb |= (1 << 5);
     322:	90 62       	ori	r25, 0x20	; 32
     324:	f0 cf       	rjmp	.-32     	; 0x306 <setup_watchdog(int)+0x14>

00000326 <system_sleep()>:
_Z12system_sleepv():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:234
*/
#define BODS 7                   //BOD Sleep bit in MCUCR
#define BODSE 2                  //BOD Sleep enable bit in MCUCR
void system_sleep() {
#ifdef POWERDOWN
  pinMode(TRANSMITTER, INPUT);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	b0 de       	rcall	.-672    	; 0x8a <pinMode.constprop.10>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:235
  cbi(ADCSRA, ADEN);                   // switch Analog to Digitalconverter OFF
     32a:	37 98       	cbi	0x06, 7	; 6
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:236
  cbi(ACSR, ACD);                      // disable the analog comparator
     32c:	47 98       	cbi	0x08, 7	; 8
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:237
  set_sleep_mode(SLEEP_MODE_PWR_DOWN); // sleep mode is set here
     32e:	85 b7       	in	r24, 0x35	; 53
     330:	87 7e       	andi	r24, 0xE7	; 231
     332:	80 61       	ori	r24, 0x10	; 16
     334:	85 bf       	out	0x35, r24	; 53
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:238
  sleep_enable();
     336:	85 b7       	in	r24, 0x35	; 53
     338:	80 62       	ori	r24, 0x20	; 32
     33a:	85 bf       	out	0x35, r24	; 53
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:239
  cli();
     33c:	f8 94       	cli
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:240
  uint8_t mcucr1 = MCUCR | _BV(BODS) | _BV(BODSE);  //turn off the brown-out detector
     33e:	85 b7       	in	r24, 0x35	; 53
     340:	98 2f       	mov	r25, r24
     342:	94 68       	ori	r25, 0x84	; 132
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:241
  uint8_t mcucr2 = mcucr1 & ~_BV(BODSE);
     344:	8b 7f       	andi	r24, 0xFB	; 251
     346:	80 68       	ori	r24, 0x80	; 128
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:242
  MCUCR = mcucr1;
     348:	95 bf       	out	0x35, r25	; 53
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:243
  MCUCR = mcucr2;
     34a:	85 bf       	out	0x35, r24	; 53
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:244
  sei();                               // ensure interrupts enabled so we can wake up again
     34c:	78 94       	sei
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:245
  sleep_mode();                        // System sleeps here
     34e:	85 b7       	in	r24, 0x35	; 53
     350:	80 62       	ori	r24, 0x20	; 32
     352:	85 bf       	out	0x35, r24	; 53
     354:	88 95       	sleep
     356:	85 b7       	in	r24, 0x35	; 53
     358:	8f 7d       	andi	r24, 0xDF	; 223
     35a:	85 bf       	out	0x35, r24	; 53
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:247

  sleep_disable();                     // System continues execution here when watchdog timed out
     35c:	85 b7       	in	r24, 0x35	; 53
     35e:	8f 7d       	andi	r24, 0xDF	; 223
     360:	85 bf       	out	0x35, r24	; 53
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:248
  sbi(ADCSRA, ADEN);                   // switch Analog to Digitalconverter ON
     362:	37 9a       	sbi	0x06, 7	; 6
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:249
  sbi(ACSR, ACD);                      // enable the analog comparator
     364:	47 9a       	sbi	0x08, 7	; 8
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:250
  pinMode(TRANSMITTER, OUTPUT);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 ce       	rjmp	.-736    	; 0x8a <pinMode.constprop.10>

0000036a <checkBattery()>:
_Z12checkBatteryv():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:162
  long result = adc_result;
  result = scale_constant  / result; // Calculate Vcc (in mV); 1126400 = 1.1*1024*1000
  return (uint16_t)result; // Vcc in millivolts
}

byte checkBattery() {
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
measureVcc():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:145
}

uint16_t measureVcc() {
  // Read 1.1V reference against AVcc
  // set the reference to Vcc and the measurement to the internal 1.1V reference
  ADMUX = _BV(MUX3) | _BV(MUX2);
     376:	8c e0       	ldi	r24, 0x0C	; 12
     378:	87 b9       	out	0x07, r24	; 7
delay():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:268
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     37a:	8e df       	rcall	.-228    	; 0x298 <micros>
     37c:	eb 01       	movw	r28, r22
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	c8 2e       	mov	r12, r24
     382:	d1 2c       	mov	r13, r1
     384:	e1 2c       	mov	r14, r1
     386:	f1 2c       	mov	r15, r1
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:272

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     388:	87 df       	rcall	.-242    	; 0x298 <micros>
     38a:	6c 1b       	sub	r22, r28
     38c:	7d 0b       	sbc	r23, r29
     38e:	68 3e       	cpi	r22, 0xE8	; 232
     390:	73 40       	sbci	r23, 0x03	; 3
     392:	80 f1       	brcs	.+96     	; 0x3f4 <checkBattery()+0x8a>
     394:	c1 14       	cp	r12, r1
     396:	d1 04       	cpc	r13, r1
     398:	e1 04       	cpc	r14, r1
     39a:	f1 04       	cpc	r15, r1
     39c:	19 f5       	brne	.+70     	; 0x3e4 <checkBattery()+0x7a>
measureVcc():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:148

  delay(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
     39e:	36 9a       	sbi	0x06, 6	; 6
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:150

  while (bit_is_set(ADCSRA, ADSC)); // measuring
     3a0:	36 99       	sbic	0x06, 6	; 6
     3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <checkBattery()+0x36>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:153
  //uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH
  //uint8_t high = ADCH; // unlocks both
  uint8_t oldSREG = SREG;
     3a4:	8f b7       	in	r24, 0x3f	; 63
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:154
  uint16_t adc_result = ADC; //In one read?
     3a6:	24 b1       	in	r18, 0x04	; 4
     3a8:	35 b1       	in	r19, 0x05	; 5
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:155
  SREG = oldSREG;
     3aa:	8f bf       	out	0x3f, r24	; 63
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:157
  //long result = (high<<8) | low;
  long result = adc_result;
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	40 e0       	ldi	r20, 0x00	; 0
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:158
  result = scale_constant  / result; // Calculate Vcc (in mV); 1126400 = 1.1*1024*1000
     3b0:	64 eb       	ldi	r22, 0xB4	; 180
     3b2:	7b e2       	ldi	r23, 0x2B	; 43
     3b4:	81 e1       	ldi	r24, 0x11	; 17
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	b5 d5       	rcall	.+2922   	; 0xf24 <__divmodsi4>
_Z12checkBatteryv():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:164
  return (uint16_t)result; // Vcc in millivolts
}

byte checkBattery() {
  // use global vcc, battery
  vcc = measureVcc();
     3ba:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <vcc+0x1>
     3be:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <vcc>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:165
  if (vcc > 0.95 * VCC) battery = 2;
     3c2:	b9 01       	movw	r22, r18
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	33 d5       	rcall	.+2662   	; 0xe30 <__floatunsisf>
     3ca:	6b 01       	movw	r12, r22
     3cc:	7c 01       	movw	r14, r24
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 ec       	ldi	r19, 0xC0	; 192
     3d2:	45 e5       	ldi	r20, 0x55	; 85
     3d4:	55 e4       	ldi	r21, 0x45	; 69
     3d6:	e4 d5       	rcall	.+3016   	; 0xfa0 <__gesf2>
     3d8:	18 16       	cp	r1, r24
     3da:	94 f4       	brge	.+36     	; 0x400 <__LOCK_REGION_LENGTH__>
     3dc:	82 e0       	ldi	r24, 0x02	; 2
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:167
  else if (vcc < 0.85 * VCC) battery = 0;
  else battery = 1;
     3de:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <battery>
     3e2:	19 c0       	rjmp	.+50     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
delay():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:273
        ms--;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	c8 1a       	sub	r12, r24
     3e8:	d1 08       	sbc	r13, r1
     3ea:	e1 08       	sbc	r14, r1
     3ec:	f1 08       	sbc	r15, r1
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:274
        start += 1000;
     3ee:	c8 51       	subi	r28, 0x18	; 24
     3f0:	dc 4f       	sbci	r29, 0xFC	; 252
     3f2:	ca cf       	rjmp	.-108    	; 0x388 <checkBattery()+0x1e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:270
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     3f4:	c1 14       	cp	r12, r1
     3f6:	d1 04       	cpc	r13, r1
     3f8:	e1 04       	cpc	r14, r1
     3fa:	f1 04       	cpc	r15, r1
     3fc:	29 f6       	brne	.-118    	; 0x388 <checkBattery()+0x1e>
     3fe:	cf cf       	rjmp	.-98     	; 0x39e <checkBattery()+0x34>
_Z12checkBatteryv():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:166

byte checkBattery() {
  // use global vcc, battery
  vcc = measureVcc();
  if (vcc > 0.95 * VCC) battery = 2;
  else if (vcc < 0.85 * VCC) battery = 0;
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e4       	ldi	r19, 0x40	; 64
     404:	4f e3       	ldi	r20, 0x3F	; 63
     406:	55 e4       	ldi	r21, 0x45	; 69
     408:	c7 01       	movw	r24, r14
     40a:	b6 01       	movw	r22, r12
     40c:	0d d5       	rcall	.+2586   	; 0xe28 <__cmpsf2>
     40e:	87 ff       	sbrs	r24, 7
     410:	09 c0       	rjmp	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     412:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <battery>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:168
  else battery = 1;
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	08 95       	ret
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:167
byte checkBattery() {
  // use global vcc, battery
  vcc = measureVcc();
  if (vcc > 0.95 * VCC) battery = 2;
  else if (vcc < 0.85 * VCC) battery = 0;
  else battery = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	db cf       	rjmp	.-74     	; 0x3de <checkBattery()+0x74>

00000428 <SensorTransmitter::sendBit(unsigned char)>:
_ZN17SensorTransmitter7sendBitEh():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:179



}

void SensorTransmitter::sendBit(byte fact) {
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24
     430:	16 2f       	mov	r17, r22
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:180
  digitalWrite(transmitterPin, HIGH);
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	8e 81       	ldd	r24, Y+6	; 0x06
     436:	d6 de       	rcall	.-596    	; 0x1e4 <digitalWrite>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:181
  delayMicroseconds(clock - 100);
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	9b 81       	ldd	r25, Y+3	; 0x03
     43c:	84 56       	subi	r24, 0x64	; 100
     43e:	91 09       	sbc	r25, r1
     440:	20 df       	rcall	.-448    	; 0x282 <delayMicroseconds>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:182
  digitalWrite(transmitterPin, LOW);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8e 81       	ldd	r24, Y+6	; 0x06
     446:	ce de       	rcall	.-612    	; 0x1e4 <digitalWrite>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:183
  delayMicroseconds(fact * clock - 250);
     448:	6a 81       	ldd	r22, Y+2	; 0x02
     44a:	7b 81       	ldd	r23, Y+3	; 0x03
     44c:	81 2f       	mov	r24, r17
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	ab d5       	rcall	.+2902   	; 0xfa8 <__mulhi3>
     452:	8a 5f       	subi	r24, 0xFA	; 250
     454:	91 09       	sbc	r25, r1
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:184
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:183

void SensorTransmitter::sendBit(byte fact) {
  digitalWrite(transmitterPin, HIGH);
  delayMicroseconds(clock - 100);
  digitalWrite(transmitterPin, LOW);
  delayMicroseconds(fact * clock - 250);
     45c:	12 cf       	rjmp	.-476    	; 0x282 <delayMicroseconds>

0000045e <asTransmitter::send(unsigned int, unsigned char, bool)>:
_ZN13asTransmitter4sendEjhb():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:278
  id = idIN & 0x3f; //only bit 0..5
  setPauseTime(40);
}
#endif //USE_MANCHESTER_CODING

void asTransmitter::send(uint16_t value, byte battery, bool trigger) {
     45e:	bf 92       	push	r11
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:279
  *(data + 0) = type | ((trigger ? 1 : 0) << 7);
     472:	8b 85       	ldd	r24, Y+11	; 0x0b
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	21 11       	cpse	r18, r1
     478:	90 e8       	ldi	r25, 0x80	; 128
     47a:	e8 81       	ld	r30, Y
     47c:	f9 81       	ldd	r31, Y+1	; 0x01
     47e:	89 2b       	or	r24, r25
     480:	80 83       	st	Z, r24
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:280
  *(data + 1) = id | ((battery & 0x3) << 6);
     482:	e8 81       	ld	r30, Y
     484:	f9 81       	ldd	r31, Y+1	; 0x01
     486:	42 95       	swap	r20
     488:	44 0f       	add	r20, r20
     48a:	44 0f       	add	r20, r20
     48c:	40 7c       	andi	r20, 0xC0	; 192
     48e:	8c 85       	ldd	r24, Y+12	; 0x0c
     490:	48 2b       	or	r20, r24
     492:	41 83       	std	Z+1, r20	; 0x01
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:281
  *(data + 2) = lowByte(value);
     494:	e8 81       	ld	r30, Y
     496:	f9 81       	ldd	r31, Y+1	; 0x01
     498:	62 83       	std	Z+2, r22	; 0x02
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:282
  *(data + 3) = highByte(value);
     49a:	e8 81       	ld	r30, Y
     49c:	f9 81       	ldd	r31, Y+1	; 0x01
     49e:	73 83       	std	Z+3, r23	; 0x03
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:283
  *(data + 4) = crc8(data, 4); //add crc
     4a0:	e8 81       	ld	r30, Y
     4a2:	f9 81       	ldd	r31, Y+1	; 0x01
     4a4:	df 01       	movw	r26, r30
     4a6:	bf 01       	movw	r22, r30
     4a8:	6c 5f       	subi	r22, 0xFC	; 252
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:299
  //printMessageHexStr();
  sendMessage();
}

uint8_t asTransmitter::crc8( uint8_t *addr, uint8_t len) {
  uint8_t crc = 0;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
crc8():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:306
    uint8_t inbyte = addr[i];
    for (uint8_t j = 0; j < 8; j++) {
      uint8_t mix = (crc ^ inbyte) & 0x01;
      crc >>= 1;
      if (mix)
        crc ^= 0x8C;
     4ae:	5c e8       	ldi	r21, 0x8C	; 140
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:301
}

uint8_t asTransmitter::crc8( uint8_t *addr, uint8_t len) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < len; i++) {
    uint8_t inbyte = addr[i];
     4b0:	4d 91       	ld	r20, X+
     4b2:	98 e0       	ldi	r25, 0x08	; 8
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:303
    for (uint8_t j = 0; j < 8; j++) {
      uint8_t mix = (crc ^ inbyte) & 0x01;
     4b4:	18 2f       	mov	r17, r24
     4b6:	14 27       	eor	r17, r20
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:304
      crc >>= 1;
     4b8:	28 2f       	mov	r18, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	35 95       	asr	r19
     4be:	27 95       	ror	r18
     4c0:	82 2f       	mov	r24, r18
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:305
      if (mix)
     4c2:	10 ff       	sbrs	r17, 0
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <asTransmitter::send(unsigned int, unsigned char, bool)+0x6c>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:306
        crc ^= 0x8C;
     4c6:	85 2f       	mov	r24, r21
     4c8:	82 27       	eor	r24, r18
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:307
      inbyte >>= 1;
     4ca:	46 95       	lsr	r20
     4cc:	91 50       	subi	r25, 0x01	; 1
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:302

uint8_t asTransmitter::crc8( uint8_t *addr, uint8_t len) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < len; i++) {
    uint8_t inbyte = addr[i];
    for (uint8_t j = 0; j < 8; j++) {
     4ce:	91 f7       	brne	.-28     	; 0x4b4 <asTransmitter::send(unsigned int, unsigned char, bool)+0x56>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:300
  sendMessage();
}

uint8_t asTransmitter::crc8( uint8_t *addr, uint8_t len) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < len; i++) {
     4d0:	6a 17       	cp	r22, r26
     4d2:	7b 07       	cpc	r23, r27
     4d4:	69 f7       	brne	.-38     	; 0x4b0 <asTransmitter::send(unsigned int, unsigned char, bool)+0x52>
_ZN13asTransmitter4sendEjhb():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:283
void asTransmitter::send(uint16_t value, byte battery, bool trigger) {
  *(data + 0) = type | ((trigger ? 1 : 0) << 7);
  *(data + 1) = id | ((battery & 0x3) << 6);
  *(data + 2) = lowByte(value);
  *(data + 3) = highByte(value);
  *(data + 4) = crc8(data, 4); //add crc
     4d6:	84 83       	std	Z+4, r24	; 0x04
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:194
  }

}

void SensorTransmitter::sendMessage() {
  for (byte cnt = 0; cnt < repeat; ++cnt) {
     4d8:	e1 2c       	mov	r14, r1
sendMessage():
     4da:	8f 81       	ldd	r24, Y+7	; 0x07
     4dc:	e8 16       	cp	r14, r24
     4de:	50 f5       	brcc	.+84     	; 0x534 <asTransmitter::send(unsigned int, unsigned char, bool)+0xd6>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:196
    // send sync
    sendBit(syncFact);
     4e0:	68 85       	ldd	r22, Y+8	; 0x08
     4e2:	ce 01       	movw	r24, r28
     4e4:	a1 df       	rcall	.-190    	; 0x428 <SensorTransmitter::sendBit(unsigned char)>
_ZN13asTransmitter4sendEjhb():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:199

    // send data
    for (int i = 0; i < numMsgBytes; ++i) {
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	00 e0       	ldi	r16, 0x00	; 0
sendMessage():
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	80 17       	cp	r24, r16
     4ee:	11 06       	cpc	r1, r17
     4f0:	e1 f0       	breq	.+56     	; 0x52a <asTransmitter::send(unsigned int, unsigned char, bool)+0xcc>
     4f2:	dc f0       	brlt	.+54     	; 0x52a <asTransmitter::send(unsigned int, unsigned char, bool)+0xcc>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:200
      sendByte(*(data + i));
     4f4:	e8 81       	ld	r30, Y
     4f6:	f9 81       	ldd	r31, Y+1	; 0x01
     4f8:	e0 0f       	add	r30, r16
     4fa:	f1 1f       	adc	r31, r17
     4fc:	b0 80       	ld	r11, Z
     4fe:	88 e0       	ldi	r24, 0x08	; 8
     500:	c8 2e       	mov	r12, r24
     502:	d1 2c       	mov	r13, r1
_ZN13asTransmitter4sendEjhb():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:187
  digitalWrite(transmitterPin, LOW);
  delayMicroseconds(fact * clock - 250);
}

void SensorTransmitter::sendByte(byte b) {
  for (byte bit = 0x80; bit > 0; bit >>= 1) {
     504:	90 e8       	ldi	r25, 0x80	; 128
     506:	f9 2e       	mov	r15, r25
sendByte():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:188
    sendBit(((b & bit) == bit) ? highFact : lowFact);
     508:	8b 2d       	mov	r24, r11
     50a:	8f 21       	and	r24, r15
     50c:	8f 11       	cpse	r24, r15
     50e:	0b c0       	rjmp	.+22     	; 0x526 <asTransmitter::send(unsigned int, unsigned char, bool)+0xc8>
     510:	6a 85       	ldd	r22, Y+10	; 0x0a
     512:	ce 01       	movw	r24, r28
     514:	89 df       	rcall	.-238    	; 0x428 <SensorTransmitter::sendBit(unsigned char)>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:187
  digitalWrite(transmitterPin, LOW);
  delayMicroseconds(fact * clock - 250);
}

void SensorTransmitter::sendByte(byte b) {
  for (byte bit = 0x80; bit > 0; bit >>= 1) {
     516:	f6 94       	lsr	r15
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	c8 1a       	sub	r12, r24
     51c:	d1 08       	sbc	r13, r1
     51e:	a1 f7       	brne	.-24     	; 0x508 <asTransmitter::send(unsigned int, unsigned char, bool)+0xaa>
sendMessage():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:199
  for (byte cnt = 0; cnt < repeat; ++cnt) {
    // send sync
    sendBit(syncFact);

    // send data
    for (int i = 0; i < numMsgBytes; ++i) {
     520:	0f 5f       	subi	r16, 0xFF	; 255
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	e2 cf       	rjmp	.-60     	; 0x4ea <asTransmitter::send(unsigned int, unsigned char, bool)+0x8c>
sendByte():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:188
  delayMicroseconds(fact * clock - 250);
}

void SensorTransmitter::sendByte(byte b) {
  for (byte bit = 0x80; bit > 0; bit >>= 1) {
    sendBit(((b & bit) == bit) ? highFact : lowFact);
     526:	69 85       	ldd	r22, Y+9	; 0x09
     528:	f4 cf       	rjmp	.-24     	; 0x512 <asTransmitter::send(unsigned int, unsigned char, bool)+0xb4>
sendMessage():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:202

    // send data
    for (int i = 0; i < numMsgBytes; ++i) {
      sendByte(*(data + i));
    }
    sendBit(pauseTime);
     52a:	6d 81       	ldd	r22, Y+5	; 0x05
     52c:	ce 01       	movw	r24, r28
     52e:	7c df       	rcall	.-264    	; 0x428 <SensorTransmitter::sendBit(unsigned char)>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:194
  }

}

void SensorTransmitter::sendMessage() {
  for (byte cnt = 0; cnt < repeat; ++cnt) {
     530:	e3 94       	inc	r14
     532:	d3 cf       	rjmp	.-90     	; 0x4da <asTransmitter::send(unsigned int, unsigned char, bool)+0x7c>
_ZN13asTransmitter4sendEjhb():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:296
      }
  */

  //printMessageHexStr();
  sendMessage();
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	bf 90       	pop	r11
     546:	08 95       	ret

00000548 <asTransmitter::asTransmitter(unsigned char, unsigned char, unsigned char) [clone .constprop.8]>:
_ZN13asTransmitterC2Ehhh.constprop.8():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:271
asTransmitter::asTransmitter(byte typeIN, byte idIN, byte transmitterPinIN): ManchesterTransmit(5, transmitterPinIN, MAN_2400, 0xC) {
  type = typeIN & 0x7f; //only bit 0..6
  id = idIN & 0x3f; //only bit 0..5
}
#else // USE_MANCHESTER_CODING
asTransmitter::asTransmitter(byte typeIN, byte idIN, byte transmitterPinIN): SensorTransmitter(4, transmitterPinIN, 500, 19, 1, 2) {
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	06 2f       	mov	r16, r22
__base_ctor ():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:140
  digitalWrite(transmitterPin, HIGH);
}//end of send one
#else // USE_MANCHESTER_CODING
//Sensor base class
SensorTransmitter::SensorTransmitter(byte numMsgBytesIN, byte transmitterPinIN, int clockIN, byte syncFactIN, byte lowFactIN, byte highFactIN) {
  transmitterPin = transmitterPinIN;
     554:	13 e0       	ldi	r17, 0x03	; 3
     556:	1e 83       	std	Y+6, r17	; 0x06
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:141
  numMsgBytes = numMsgBytesIN;
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:142
  data = (byte*) calloc(numMsgBytes, sizeof(byte));
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	44 d5       	rcall	.+2696   	; 0xfee <calloc>
     566:	99 83       	std	Y+1, r25	; 0x01
     568:	88 83       	st	Y, r24
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:143
  clock = clockIN;
     56a:	84 ef       	ldi	r24, 0xF4	; 244
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9b 83       	std	Y+3, r25	; 0x03
     570:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:144
  syncFact = syncFactIN;
     572:	83 e1       	ldi	r24, 0x13	; 19
     574:	88 87       	std	Y+8, r24	; 0x08
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:145
  lowFact = lowFactIN;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	89 87       	std	Y+9, r24	; 0x09
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:146
  highFact = highFactIN;
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	8a 87       	std	Y+10, r24	; 0x0a
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:147
  repeat = 3; //default, set seperately
     57e:	1f 83       	std	Y+7, r17	; 0x07
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:148
  pauseTime = 20; //default, set seperately
     580:	84 e1       	ldi	r24, 0x14	; 20
     582:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:149
  pinMode(transmitterPin, OUTPUT);
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	81 dd       	rcall	.-1278   	; 0x8a <pinMode.constprop.10>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:150
  digitalWrite(transmitterPin, LOW);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	8e 81       	ldd	r24, Y+6	; 0x06
     58c:	2b de       	rcall	.-938    	; 0x1e4 <digitalWrite>
_ZN13asTransmitterC2Ehhh.constprop.8():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:272
  type = typeIN & 0x7f; //only bit 0..6
  id = idIN & 0x3f; //only bit 0..5
}
#else // USE_MANCHESTER_CODING
asTransmitter::asTransmitter(byte typeIN, byte idIN, byte transmitterPinIN): SensorTransmitter(4, transmitterPinIN, 500, 19, 1, 2) {
  type = typeIN & 0x7f; //only bit 0..6
     58e:	0b 87       	std	Y+11, r16	; 0x0b
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:273
  id = idIN & 0x3f; //only bit 0..5
     590:	1c 86       	std	Y+12, r1	; 0x0c
setPauseTime():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:213
void SensorTransmitter::setRepeat(byte repeatIN) {
  repeat = repeatIN;
}

void SensorTransmitter::setPauseTime(byte pauseTimeIN) {
  pauseTime = pauseTimeIN;
     592:	88 e2       	ldi	r24, 0x28	; 40
     594:	8d 83       	std	Y+5, r24	; 0x05
_ZN13asTransmitterC2Ehhh.constprop.8():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SensorTransmitter.cpp:275
#else // USE_MANCHESTER_CODING
asTransmitter::asTransmitter(byte typeIN, byte idIN, byte transmitterPinIN): SensorTransmitter(4, transmitterPinIN, 500, 19, 1, 2) {
  type = typeIN & 0x7f; //only bit 0..6
  id = idIN & 0x3f; //only bit 0..5
  setPauseTime(40);
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:226
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
     5a0:	8e b9       	out	0x0e, r24	; 14
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
     5a2:	8b e2       	ldi	r24, 0x2B	; 43
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	9a 95       	dec	r25
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <USI_TWI_Master_Transfer+0x6>
USI_TWI_Master_Transfer():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
     5aa:	8d b9       	out	0x0d, r24	; 13
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:235
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     5ac:	b2 9b       	sbis	0x16, 2	; 22
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <USI_TWI_Master_Transfer+0xc>
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <USI_TWI_Master_Transfer+0x12>
     5b2:	00 00       	nop
USI_TWI_Master_Transfer():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:238
      ; // Wait for SCL to go high.
    DELAY_T4TWI;
    USICR = temp;                   // Generate negative SCL edge.
     5b4:	8d b9       	out	0x0d, r24	; 13
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:239
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     5b6:	76 9b       	sbis	0x0e, 6	; 14
     5b8:	f5 cf       	rjmp	.-22     	; 0x5a4 <USI_TWI_Master_Transfer+0x4>
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	8a 95       	dec	r24
     5be:	f1 f7       	brne	.-4      	; 0x5bc <USI_TWI_Master_Transfer+0x1c>
USI_TWI_Master_Transfer():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:242

  DELAY_T2TWI;
  temp  = USIDR;                 // Read out data.
     5c0:	8f b1       	in	r24, 0x0f	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:243
  USIDR = 0xFF;                  // Release SDA.
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	9f b9       	out	0x0f, r25	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:244
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     5c6:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:247

  return temp; // Return the data from the USIDR
}
     5c8:	08 95       	ret

000005ca <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:106
#ifndef __GNUC__
__x // AVR compiler
#endif
    unsigned char
    USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	06 2f       	mov	r16, r22
     5d6:	14 2f       	mov	r17, r20
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:115
  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
                                 |                 // Prepare register value to: Clear flags, and
                                 (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
  USI_TWI_state.addressMode = TRUE;
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <USI_TWI_state>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:145
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if (!(*msg
     5de:	fc 01       	movw	r30, r24
     5e0:	20 81       	ld	r18, Z
     5e2:	20 fd       	sbrc	r18, 0
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:148
        & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
     5e6:	23 e0       	ldi	r18, 0x03	; 3
     5e8:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <USI_TWI_state>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:152
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     5ec:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     5ee:	b2 9b       	sbis	0x16, 2	; 22
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
     5f4:	00 00       	nop
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:162
#else
  DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     5f6:	c0 98       	cbi	0x18, 0	; 24
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <USI_TWI_Start_Transceiver_With_Data_Stop+0x30>
     5fa:	00 00       	nop
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:164
  DELAY_T4TWI;
  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     5fc:	c2 98       	cbi	0x18, 2	; 24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:165
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     5fe:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:168

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
     600:	77 99       	sbic	0x0e, 7	; 14
     602:	0b c0       	rjmp	.+22     	; 0x61a <USI_TWI_Start_Transceiver_With_Data_Stop+0x50>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:169
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     604:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:187

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
        if (USI_TWI_state.addressMode)
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     606:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <USI_TWI_state>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:190
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
     60a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:217
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
}
     60c:	81 2f       	mov	r24, r17
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	08 95       	ret
     61a:	ec 01       	movw	r28, r24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     61c:	ff 24       	eor	r15, r15
     61e:	fa 94       	dec	r15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:177
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     620:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <USI_TWI_state>
     624:	83 70       	andi	r24, 0x03	; 3
     626:	19 f1       	breq	.+70     	; 0x66e <USI_TWI_Start_Transceiver_With_Data_Stop+0xa4>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:179
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     628:	c2 98       	cbi	0x18, 2	; 24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:180
      USIDR = *(msg++);                        // Setup data.
     62a:	88 81       	ld	r24, Y
     62c:	8f b9       	out	0x0f, r24	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:181
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     62e:	80 ef       	ldi	r24, 0xF0	; 240
     630:	b7 df       	rcall	.-146    	; 0x5a0 <USI_TWI_Master_Transfer>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:184

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     632:	b8 98       	cbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:185
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     634:	8e ef       	ldi	r24, 0xFE	; 254
     636:	b4 df       	rcall	.-152    	; 0x5a0 <USI_TWI_Master_Transfer>
     638:	80 ff       	sbrs	r24, 0
     63a:	0c c0       	rjmp	.+24     	; 0x654 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8a>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:186
        if (USI_TWI_state.addressMode)
     63c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <USI_TWI_state>
     640:	18 2f       	mov	r17, r24
     642:	11 70       	andi	r17, 0x01	; 1
     644:	80 ff       	sbrs	r24, 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <USI_TWI_Start_Transceiver_With_Data_Stop+0x82>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:187
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     648:	86 e0       	ldi	r24, 0x06	; 6
     64a:	dd cf       	rjmp	.-70     	; 0x606 <USI_TWI_Start_Transceiver_With_Data_Stop+0x3c>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:189
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     64c:	85 e0       	ldi	r24, 0x05	; 5
USI_TWI_Master_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:265
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
  DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     64e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <USI_TWI_state>
     652:	dc cf       	rjmp	.-72     	; 0x60c <USI_TWI_Start_Transceiver_With_Data_Stop+0x42>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:192
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     654:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <USI_TWI_state>
     658:	8e 7f       	andi	r24, 0xFE	; 254
     65a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <USI_TWI_state>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:209
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    }
  } while (--msgSize); // Until all data sent/received.
     65e:	01 50       	subi	r16, 0x01	; 1
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	01 11       	cpse	r16, r1
     664:	dd cf       	rjmp	.-70     	; 0x620 <USI_TWI_Start_Transceiver_With_Data_Stop+0x56>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:211

  if (stop) {
     666:	11 11       	cpse	r17, r1
     668:	0e c0       	rjmp	.+28     	; 0x686 <USI_TWI_Start_Transceiver_With_Data_Stop+0xbc>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:216
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
     66a:	11 e0       	ldi	r17, 0x01	; 1
     66c:	cf cf       	rjmp	.-98     	; 0x60c <USI_TWI_Start_Transceiver_With_Data_Stop+0x42>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:197
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     66e:	b8 98       	cbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:198
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     670:	80 ef       	ldi	r24, 0xF0	; 240
     672:	96 df       	rcall	.-212    	; 0x5a0 <USI_TWI_Master_Transfer>
     674:	88 83       	st	Y, r24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:201

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
     676:	01 30       	cpi	r16, 0x01	; 1
     678:	21 f4       	brne	.+8      	; 0x682 <USI_TWI_Start_Transceiver_With_Data_Stop+0xb8>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     67a:	ff b8       	out	0x0f, r15	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:207
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     67c:	8e ef       	ldi	r24, 0xFE	; 254
     67e:	90 df       	rcall	.-224    	; 0x5a0 <USI_TWI_Master_Transfer>
     680:	ee cf       	rjmp	.-36     	; 0x65e <USI_TWI_Start_Transceiver_With_Data_Stop+0x94>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:205
      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
     682:	1f b8       	out	0x0f, r1	; 15
     684:	fb cf       	rjmp	.-10     	; 0x67c <USI_TWI_Start_Transceiver_With_Data_Stop+0xb2>
USI_TWI_Master_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:255
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     686:	c0 98       	cbi	0x18, 0	; 24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:256
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     688:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:257
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     68a:	b2 9b       	sbis	0x16, 2	; 22
     68c:	fe cf       	rjmp	.-4      	; 0x68a <USI_TWI_Start_Transceiver_With_Data_Stop+0xc0>
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
     68e:	00 c0       	rjmp	.+0      	; 0x690 <USI_TWI_Start_Transceiver_With_Data_Stop+0xc6>
     690:	00 00       	nop
USI_TWI_Master_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:260
    ; // Wait for SCL to go high.
  DELAY_T4TWI;
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     692:	c0 9a       	sbi	0x18, 0	; 24
_delay_us():
c:\users\ub\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	fa 95       	dec	r31
     698:	f1 f7       	brne	.-4      	; 0x696 <USI_TWI_Start_Transceiver_With_Data_Stop+0xcc>
USI_TWI_Master_Stop():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:264
  DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
     69a:	75 99       	sbic	0x0e, 5	; 14
     69c:	e6 cf       	rjmp	.-52     	; 0x66a <USI_TWI_Start_Transceiver_With_Data_Stop+0xa0>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:265
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	d6 cf       	rjmp	.-84     	; 0x64e <USI_TWI_Start_Transceiver_With_Data_Stop+0x84>

000006a2 <SI7021::_writeReg(unsigned char*, int) [clone .constprop.20]>:
_ZN6SI70219_writeRegEPhi.constprop.20():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:456
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	20 93 bf 00 	sts	0x00BF, r18	; 0x8000bf <TwoWire::transmitting>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:458
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
     6a8:	e2 e8       	ldi	r30, 0x82	; 130
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	20 e8       	ldi	r18, 0x80	; 128
     6ae:	20 83       	st	Z, r18
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:84

void SI7021::_writeReg(byte * reg, int reglen) {
    Wire.beginTransmission(I2C_ADDR);
    for(int i = 0; i < reglen; i++) {
        reg += i;
        Wire.write(*reg); 
     6b0:	dc 01       	movw	r26, r24
     6b2:	2c 91       	ld	r18, X
write():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:507
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
     6b4:	21 83       	std	Z+1, r18	; 0x01
_ZN6SI70219_writeRegEPhi.constprop.20():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:84
     6b6:	11 96       	adiw	r26, 0x01	; 1
     6b8:	8c 91       	ld	r24, X
write():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:507
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <TwoWire::BufferIndex>
     6c2:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <TwoWire::BufferLength>
endTransmission():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:472

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	63 e0       	ldi	r22, 0x03	; 3
     6ca:	cf 01       	movw	r24, r30
     6cc:	7e df       	rcall	.-260    	; 0x5ca <USI_TWI_Start_Transceiver_With_Data_Stop>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:474
  // reset tx buffer iterator vars
  BufferIndex = 0;
     6ce:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <TwoWire::BufferIndex>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:475
  BufferLength = 0;
     6d2:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <TwoWire::BufferLength>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:477
  // indicate that we are done transmitting
  transmitting = 0;
     6d6:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <TwoWire::transmitting>
_ZN6SI70219_writeRegEPhi.constprop.20():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:87
    }
    Wire.endTransmission();
}
     6da:	08 95       	ret

000006dc <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]>:
_ZN6SI70218_readRegEPhi.constprop.14():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:89

int SI7021::_readReg(byte * reg, int reglen) {
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	d8 2f       	mov	r29, r24
     6e8:	c9 2f       	mov	r28, r25
requestFrom():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:420
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
     6ea:	81 e8       	ldi	r24, 0x81	; 129
     6ec:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:423
  // perform blocking read into buffer
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer, quantity,
                                                         sendStop);
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	63 e0       	ldi	r22, 0x03	; 3
     6f4:	82 e8       	ldi	r24, 0x82	; 130
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	68 df       	rcall	.-304    	; 0x5ca <USI_TWI_Start_Transceiver_With_Data_Stop>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:425
  // set rx buffer iterator vars
  BufferIndex = 1; // ignore slave address
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <TwoWire::BufferIndex>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:427
  // check for error
  if (ret == FALSE) {
     700:	81 11       	cpse	r24, r1
     702:	26 c0       	rjmp	.+76     	; 0x750 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x74>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:428
    BufferLength = BufferIndex;
     704:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <TwoWire::BufferLength>
available():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:545

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     708:	f0 90 bd 00 	lds	r15, 0x00BD	; 0x8000bd <TwoWire::BufferLength>
     70c:	ff 20       	and	r15, r15
     70e:	21 f1       	breq	.+72     	; 0x758 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x7c>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:546
    return BufferLength - BufferIndex;
     710:	2f 2d       	mov	r18, r15
     712:	21 50       	subi	r18, 0x01	; 1
     714:	33 0b       	sbc	r19, r19
     716:	c9 01       	movw	r24, r18
_ZN6SI70218_readRegEPhi.constprop.14():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:91
    Wire.requestFrom(I2C_ADDR, reglen);
    while(Wire.available() < reglen) {
     718:	02 97       	sbiw	r24, 0x02	; 2
     71a:	b4 f3       	brlt	.-20     	; 0x708 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x2c>
     71c:	0d 2f       	mov	r16, r29
     71e:	1c 2f       	mov	r17, r28
     720:	e8 01       	movw	r28, r16
     722:	22 96       	adiw	r28, 0x02	; 2
available():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:545

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     724:	ff 20       	and	r15, r15
     726:	d9 f0       	breq	.+54     	; 0x75e <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x82>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:546
    return BufferLength - BufferIndex;
     728:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <TwoWire::BufferIndex>
read():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:559
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     72c:	f2 12       	cpse	r15, r18
     72e:	2b c0       	rjmp	.+86     	; 0x786 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0xaa>
_ZN6SI70218_readRegEPhi.constprop.14():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:556

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:94
    }
    for(int i = 0; i < reglen; i++) { 
        reg[i] = Wire.read(); 
     734:	f8 01       	movw	r30, r16
     736:	81 93       	st	Z+, r24
     738:	8f 01       	movw	r16, r30
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:93

int SI7021::_readReg(byte * reg, int reglen) {
    Wire.requestFrom(I2C_ADDR, reglen);
    while(Wire.available() < reglen) {
    }
    for(int i = 0; i < reglen; i++) { 
     73a:	ec 17       	cp	r30, r28
     73c:	fd 07       	cpc	r31, r29
     73e:	91 f7       	brne	.-28     	; 0x724 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x48>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:97
        reg[i] = Wire.read(); 
    }
    return 1;
}
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	08 95       	ret
requestFrom():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:431
  // check for error
  if (ret == FALSE) {
    BufferLength = BufferIndex;
    return 0;
  }
  BufferLength = quantity;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <TwoWire::BufferLength>
     756:	d8 cf       	rjmp	.-80     	; 0x708 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x2c>
available():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:548
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    return BufferLength - BufferIndex;
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     758:	c5 dd       	rcall	.-1142   	; 0x2e4 <USI_TWI_Data_In_Receive_Buffer>
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	dd cf       	rjmp	.-70     	; 0x718 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x3c>
     75e:	c2 dd       	rcall	.-1148   	; 0x2e4 <USI_TWI_Data_In_Receive_Buffer>
read():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:559
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     760:	88 23       	and	r24, r24
     762:	31 f3       	breq	.-52     	; 0x730 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x54>
USI_TWI_Receive_Byte():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
     764:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <TWI_RxTail>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
     768:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <TWI_RxHead>
     76c:	98 17       	cp	r25, r24
     76e:	e1 f3       	breq	.-8      	; 0x768 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x8c>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
     770:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <TWI_RxTail>
     774:	ef 5f       	subi	r30, 0xFF	; 255
     776:	ef 70       	andi	r30, 0x0F	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
     778:	e0 93 b9 00 	sts	0x00B9, r30	; 0x8000b9 <TWI_RxTail>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	ee 57       	subi	r30, 0x7E	; 126
     780:	ff 4f       	sbci	r31, 0xFF	; 255
read():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:564
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
     782:	80 81       	ld	r24, Z
     784:	d7 cf       	rjmp	.-82     	; 0x734 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x58>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:561
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
     786:	e2 2f       	mov	r30, r18
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ee 57       	subi	r30, 0x7E	; 126
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	80 81       	ld	r24, Z
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src/Wire.cpp:562
      ++BufferIndex;
     790:	2f 5f       	subi	r18, 0xFF	; 255
     792:	20 93 be 00 	sts	0x00BE, r18	; 0x8000be <TwoWire::BufferIndex>
     796:	ce cf       	rjmp	.-100    	; 0x734 <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]+0x58>

00000798 <__vector_7>:
__vector_7():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:90
//rename the vector so we can use it.
  #define ANALOG_COMP_vect ANA_COMP_vect
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	2f 93       	push	r18
     7a4:	3f 93       	push	r19
     7a6:	4f 93       	push	r20
     7a8:	6f 93       	push	r22
     7aa:	7f 93       	push	r23
     7ac:	8f 93       	push	r24
     7ae:	9f 93       	push	r25
     7b0:	af 93       	push	r26
     7b2:	bf 93       	push	r27
     7b4:	ef 93       	push	r30
     7b6:	ff 93       	push	r31
getch():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:70
      [mask] "r" (Serial._rxmask)
    :
      "r23",
      "r24",
      "r25"
    );
     7b8:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <Serial+0xc>
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	28 e0       	ldi	r18, 0x08	; 8
     7c0:	35 d0       	rcall	.+106    	; 0x82c <uartDelay>
     7c2:	34 d0       	rcall	.+104    	; 0x82c <uartDelay>
     7c4:	33 d0       	rcall	.+102    	; 0x82c <uartDelay>
     7c6:	32 d0       	rcall	.+100    	; 0x82c <uartDelay>
     7c8:	31 d0       	rcall	.+98     	; 0x82c <uartDelay>
     7ca:	88 94       	clc
     7cc:	76 b3       	in	r23, 0x16	; 22
     7ce:	73 23       	and	r23, r19
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_7+0x3c>
     7d2:	08 94       	sec
     7d4:	47 95       	ror	r20
     7d6:	2a 95       	dec	r18
     7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_7+0x44>
     7da:	f3 cf       	rjmp	.-26     	; 0x7c2 <__vector_7+0x2a>
     7dc:	27 d0       	rcall	.+78     	; 0x82c <uartDelay>
     7de:	26 d0       	rcall	.+76     	; 0x82c <uartDelay>
__vector_7():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:92
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
     7e0:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <Serial+0xf>
     7e4:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <Serial+0x10>
store_char():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:162
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

void store_char(unsigned char c, soft_ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     7e8:	20 a1       	ldd	r18, Z+32	; 0x20
     7ea:	31 a1       	ldd	r19, Z+33	; 0x21
     7ec:	c9 01       	movw	r24, r18
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	8f 71       	andi	r24, 0x1F	; 31
     7f2:	99 27       	eor	r25, r25
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:168

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     7f4:	62 a1       	ldd	r22, Z+34	; 0x22
     7f6:	73 a1       	ldd	r23, Z+35	; 0x23
     7f8:	86 17       	cp	r24, r22
     7fa:	97 07       	cpc	r25, r23
     7fc:	31 f0       	breq	.+12     	; 0x80a <__vector_7+0x72>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:169
    buffer->buffer[buffer->head] = c;
     7fe:	2e 0f       	add	r18, r30
     800:	3f 1f       	adc	r19, r31
     802:	d9 01       	movw	r26, r18
     804:	4c 93       	st	X, r20
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:170
    buffer->head = i;
     806:	91 a3       	std	Z+33, r25	; 0x21
     808:	80 a3       	std	Z+32, r24	; 0x20
__vector_7():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:93
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
  sbi(ACSR,ACI); //clear the flag.
     80a:	44 9a       	sbi	0x08, 4	; 8
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:94
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <uartDelay>:
uartDelay():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/TinySoftwareSerial.cpp:81
    "mov r25,%[count]\n"
    "1:dec r25\n"
      "brne 1b\n"
      "ret\n"
    ::[count] "r" ((uint8_t)Serial._delayCount)
  );
     82c:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <Serial+0x11>
     830:	98 2f       	mov	r25, r24
     832:	9a 95       	dec	r25
     834:	f1 f7       	brne	.-4      	; 0x832 <uartDelay+0x6>
     836:	08 95       	ret

00000838 <__vector_5>:
__vector_5():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:132
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:135
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     84e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <millis_timer_millis>
     852:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <millis_timer_millis+0x1>
     856:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <millis_timer_millis+0x2>
     85a:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <millis_timer_millis+0x3>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:136
    unsigned char f = millis_timer_fract;
     85e:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <millis_timer_fract>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:138

    f += FRACT_INC;
     862:	26 e0       	ldi	r18, 0x06	; 6
     864:	23 0f       	add	r18, r19
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:140

    if (f >= FRACT_MAX)
     866:	2d 37       	cpi	r18, 0x7D	; 125
     868:	68 f1       	brcs	.+90     	; 0x8c4 <__vector_5+0x8c>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:142
    {
      f -= FRACT_MAX;
     86a:	29 e8       	ldi	r18, 0x89	; 137
     86c:	23 0f       	add	r18, r19
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:144
    m += 1;
      m += MILLIS_INC;
     86e:	03 96       	adiw	r24, 0x03	; 3
     870:	a1 1d       	adc	r26, r1
     872:	b1 1d       	adc	r27, r1
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:151
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     874:	20 93 a3 00 	sts	0x00A3, r18	; 0x8000a3 <millis_timer_fract>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:152
    millis_timer_millis = m;
     878:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <millis_timer_millis>
     87c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <millis_timer_millis+0x1>
     880:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <millis_timer_millis+0x2>
     884:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <millis_timer_millis+0x3>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:153
    millis_timer_overflow_count++;
     888:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <millis_timer_overflow_count>
     88c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <millis_timer_overflow_count+0x1>
     890:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <millis_timer_overflow_count+0x2>
     894:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <millis_timer_overflow_count+0x3>
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	a1 1d       	adc	r26, r1
     89c:	b1 1d       	adc	r27, r1
     89e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <millis_timer_overflow_count>
     8a2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <millis_timer_overflow_count+0x1>
     8a6:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <millis_timer_overflow_count+0x2>
     8aa:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <millis_timer_overflow_count+0x3>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:155

  }
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	3f 91       	pop	r19
     8b8:	2f 91       	pop	r18
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:148
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     8c4:	02 96       	adiw	r24, 0x02	; 2
     8c6:	a1 1d       	adc	r26, r1
     8c8:	b1 1d       	adc	r27, r1
     8ca:	d4 cf       	rjmp	.-88     	; 0x874 <__vector_5+0x3c>

000008cc <__vector_14>:
__vector_14():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	2f 93       	push	r18
     8d8:	8f 93       	push	r24
     8da:	9f 93       	push	r25
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     8e0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <USI_TWI_Overflow_State>
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	09 f4       	brne	.+2      	; 0x8ea <__vector_14+0x1e>
     8e8:	5e c0       	rjmp	.+188    	; 0x9a6 <__vector_14+0xda>
     8ea:	78 f4       	brcc	.+30     	; 0x90a <__vector_14+0x3e>
     8ec:	88 23       	and	r24, r24
     8ee:	49 f1       	breq	.+82     	; 0x942 <__vector_14+0x76>
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <__vector_14+0x2a>
     8f4:	3e c0       	rjmp	.+124    	; 0x972 <__vector_14+0xa6>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:310
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     8f6:	ff 91       	pop	r31
     8f8:	ef 91       	pop	r30
     8fa:	9f 91       	pop	r25
     8fc:	8f 91       	pop	r24
     8fe:	2f 91       	pop	r18
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     90a:	84 30       	cpi	r24, 0x04	; 4
     90c:	09 f4       	brne	.+2      	; 0x910 <__vector_14+0x44>
     90e:	51 c0       	rjmp	.+162    	; 0x9b2 <__vector_14+0xe6>
     910:	48 f1       	brcs	.+82     	; 0x964 <__vector_14+0x98>
     912:	85 30       	cpi	r24, 0x05	; 5
     914:	81 f7       	brne	.-32     	; 0x8f6 <__vector_14+0x2a>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:297
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <USI_TWI_Overflow_State>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:298
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     91c:	9f b1       	in	r25, 0x0f	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:299
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     91e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <TWI_RxHead>
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:300
    if (TWI_RxTail != tmpRxHead) {
     926:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <TWI_RxTail>
     92a:	28 17       	cp	r18, r24
     92c:	09 f4       	brne	.+2      	; 0x930 <__vector_14+0x64>
     92e:	46 c0       	rjmp	.+140    	; 0x9bc <__vector_14+0xf0>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:301
      TWI_RxHead            = tmpRxHead;
     930:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <TWI_RxHead>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     934:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <TWI_RxHead>
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	ee 57       	subi	r30, 0x7E	; 126
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	90 83       	st	Z, r25
     940:	0b c0       	rjmp	.+22     	; 0x958 <__vector_14+0x8c>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     942:	8f b1       	in	r24, 0x0f	; 15
     944:	88 23       	and	r24, r24
     946:	19 f0       	breq	.+6      	; 0x94e <__vector_14+0x82>
     948:	8f b1       	in	r24, 0x0f	; 15
     94a:	86 95       	lsr	r24
     94c:	71 f4       	brne	.+28     	; 0x96a <__vector_14+0x9e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:222
      if (USIDR & 0x01) {
     94e:	78 9b       	sbis	0x0f, 0	; 15
     950:	07 c0       	rjmp	.+14     	; 0x960 <__vector_14+0x94>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:229
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     952:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     954:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <USI_TWI_Overflow_State>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:233
      }
      SET_USI_TO_SEND_ACK();
     958:	1f b8       	out	0x0f, r1	; 15
     95a:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     95c:	8e e7       	ldi	r24, 0x7E	; 126
     95e:	21 c0       	rjmp	.+66     	; 0x9a2 <__vector_14+0xd6>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	f8 cf       	rjmp	.-16     	; 0x954 <__vector_14+0x88>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:242
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     964:	8f b1       	in	r24, 0x0f	; 15
     966:	88 23       	and	r24, r24
     968:	21 f0       	breq	.+8      	; 0x972 <__vector_14+0xa6>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     96a:	b8 98       	cbi	0x17, 0	; 23
     96c:	88 ea       	ldi	r24, 0xA8	; 168
     96e:	8d b9       	out	0x0d, r24	; 13
     970:	17 c0       	rjmp	.+46     	; 0x9a0 <__vector_14+0xd4>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:253

  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     972:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <TWI_TxTail>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:254
    if (TWI_TxHead != tmpTxTail) {
     976:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <TWI_TxHead>
     97a:	98 17       	cp	r25, r24
     97c:	b1 f3       	breq	.-20     	; 0x96a <__vector_14+0x9e>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     97e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <TWI_TxTail>
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	8f 70       	andi	r24, 0x0F	; 15
     986:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <TWI_TxTail>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:256
      USIDR      = TWI_TxBuf[TWI_TxTail];
     98a:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <TWI_TxTail>
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ee 56       	subi	r30, 0x6E	; 110
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	80 81       	ld	r24, Z
     996:	8f b9       	out	0x0f, r24	; 15
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:262
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <USI_TWI_Overflow_State>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:263
    SET_USI_TO_SEND_DATA();
     99e:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
     9a0:	80 e7       	ldi	r24, 0x70	; 112
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     9a2:	8e b9       	out	0x0e, r24	; 14
     9a4:	a8 cf       	rjmp	.-176    	; 0x8f6 <__vector_14+0x2a>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:268
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <USI_TWI_Overflow_State>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:269
    SET_USI_TO_READ_ACK();
     9ac:	b8 98       	cbi	0x17, 0	; 23
     9ae:	1f b8       	out	0x0f, r1	; 15
     9b0:	d5 cf       	rjmp	.-86     	; 0x95c <__vector_14+0x90>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:275
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     9b2:	85 e0       	ldi	r24, 0x05	; 5
     9b4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <USI_TWI_Overflow_State>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276
    SET_USI_TO_READ_DATA();
     9b8:	b8 98       	cbi	0x17, 0	; 23
     9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <__vector_14+0xd4>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     9bc:	b8 98       	cbi	0x17, 0	; 23
     9be:	ce cf       	rjmp	.-100    	; 0x95c <__vector_14+0x90>

000009c0 <__vector_13>:
__vector_13():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	8f 93       	push	r24
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     9cc:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <USI_TWI_Overflow_State>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     9d0:	b8 98       	cbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     9d2:	b2 9b       	sbis	0x16, 2	; 22
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__vector_13+0x1e>
     9d6:	b0 9b       	sbis	0x16, 0	; 22
     9d8:	fc cf       	rjmp	.-8      	; 0x9d2 <__vector_13+0x12>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     9da:	88 ea       	ldi	r24, 0xA8	; 168
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__vector_13+0x20>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     9de:	88 ef       	ldi	r24, 0xF8	; 248
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     9e0:	8d b9       	out	0x0d, r24	; 13
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     9e2:	80 ef       	ldi	r24, 0xF0	; 240
     9e4:	8e b9       	out	0x0e, r24	; 14
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     9e6:	8f 91       	pop	r24
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_12>:
__vector_12():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:276
  WDTCR |= _BV(WDIE);
  sei();
}

ISR (WDT_vect)
{
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:279
  // WDIE & WDIF is cleared in hardware upon entering this ISR
  //wdt_disable();
}
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <global constructors keyed to 65535_0_SI7021.cpp.o.2187>:
_GLOBAL__I_65535_0_SI7021.cpp.o.2187():
     a06:	e4 ee       	ldi	r30, 0xE4	; 228
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	13 82       	std	Z+3, r1	; 0x03
     a0c:	12 82       	std	Z+2, r1	; 0x02
     a0e:	88 ee       	ldi	r24, 0xE8	; 232
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	84 83       	std	Z+4, r24	; 0x04
     a18:	95 83       	std	Z+5, r25	; 0x05
     a1a:	a6 83       	std	Z+6, r26	; 0x06
     a1c:	b7 83       	std	Z+7, r27	; 0x07
     a1e:	85 e7       	ldi	r24, 0x75	; 117
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
     a26:	80 ec       	ldi	r24, 0xC0	; 192
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	90 8b       	std	Z+16, r25	; 0x10
     a2c:	87 87       	std	Z+15, r24	; 0x0f
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	84 87       	std	Z+12, r24	; 0x0c
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	85 87       	std	Z+13, r24	; 0x0d
     a36:	8e ef       	ldi	r24, 0xFE	; 254
     a38:	86 87       	std	Z+14, r24	; 0x0e
     a3a:	11 8a       	std	Z+17, r1	; 0x11
     a3c:	66 e0       	ldi	r22, 0x06	; 6
     a3e:	80 e1       	ldi	r24, 0x10	; 16
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	82 dd       	rcall	.-1276   	; 0x548 <asTransmitter::asTransmitter(unsigned char, unsigned char, unsigned char) [clone .constprop.8]>
     a44:	68 e0       	ldi	r22, 0x08	; 8
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	7e dd       	rcall	.-1284   	; 0x548 <asTransmitter::asTransmitter(unsigned char, unsigned char, unsigned char) [clone .constprop.8]>
     a4c:	69 e0       	ldi	r22, 0x09	; 9
     a4e:	86 ef       	ldi	r24, 0xF6	; 246
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	7a cd       	rjmp	.-1292   	; 0x548 <asTransmitter::asTransmitter(unsigned char, unsigned char, unsigned char) [clone .constprop.8]>

00000a54 <main>:
main():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	00 d0       	rcall	.+0      	; 0xa5a <main+0x6>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:894
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	8a bd       	out	0x2a, r24	; 42
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:895
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	83 bf       	out	0x33, r24	; 51
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:916
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     a66:	78 94       	sei
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:921

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     a68:	89 b7       	in	r24, 0x39	; 57
     a6a:	82 60       	ori	r24, 0x02	; 2
     a6c:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:584
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     a6e:	80 e4       	ldi	r24, 0x40	; 64
     a70:	8c bd       	out	0x2c, r24	; 44
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:585
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	8d bd       	out	0x2d, r24	; 45
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:586
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     a76:	86 ec       	ldi	r24, 0xC6	; 198
     a78:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:960

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     a7a:	86 b1       	in	r24, 0x06	; 6
     a7c:	88 77       	andi	r24, 0x78	; 120
     a7e:	83 68       	ori	r24, 0x83	; 131
     a80:	86 b9       	out	0x06, r24	; 6
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring.c:962
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     a82:	37 9a       	sbi	0x06, 7	; 6
analogRead():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
     a84:	17 b8       	out	0x07, r1	; 7
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
     a86:	87 b1       	in	r24, 0x07	; 7
     a88:	87 b9       	out	0x07, r24	; 7
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
     a8a:	36 9a       	sbi	0x06, 6	; 6
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
     a8c:	36 99       	sbic	0x06, 6	; 6
     a8e:	fe cf       	rjmp	.-4      	; 0xa8c <main+0x38>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
     a90:	84 b1       	in	r24, 0x04	; 4
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
     a92:	95 b1       	in	r25, 0x05	; 5
setup():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:115
const float internalRef = 1.1; // for calibration no compensation is required
const long scale_constant = internalRef * 1023 * 1000;
#endif

void setup() {
  srand (analogRead(PWRDEV));
     a94:	1c d1       	rcall	.+568    	; 0xcce <srand>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:116
  pinMode(TRANSMITTER, OUTPUT);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	f8 da       	rcall	.-2576   	; 0x8a <pinMode.constprop.10>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:118

  if (MCUSR & _BV(WDRF)) {          // If a reset was caused by the Watchdog Timer...
     a9a:	04 b6       	in	r0, 0x34	; 52
     a9c:	03 fe       	sbrs	r0, 3
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <main+0x5a>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:119
    MCUSR &= ~_BV(WDRF);                 // Clear the WDT reset flag
     aa0:	84 b7       	in	r24, 0x34	; 52
     aa2:	87 7f       	andi	r24, 0xF7	; 247
     aa4:	84 bf       	out	0x34, r24	; 52
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:120
    WDTCR |= (_BV(WDCE) | _BV(WDE));   // Enable the WD Change Bit
     aa6:	81 b5       	in	r24, 0x21	; 33
     aa8:	88 61       	ori	r24, 0x18	; 24
     aaa:	81 bd       	out	0x21, r24	; 33
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:121
    WDTCR = 0x00;                      // Disable the WDT
     aac:	11 bc       	out	0x21, r1	; 33
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:124
  }
  //  digitalWrite(PWRTRANSMITTER,1); //power supply for transmitter on digital pin
  checkBattery();// this will also measure and set vcc
     aae:	5d dc       	rcall	.-1862   	; 0x36a <checkBattery()>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:127

#ifdef POWERDOWN
  setup_watchdog(WDTO_2S);                     // approximately 2 seconds sleep
     ab0:	87 e0       	ldi	r24, 0x07	; 7
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	1e dc       	rcall	.-1988   	; 0x2f2 <setup_watchdog(int)>
USI_TWI_Master_Initialise():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:48
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
  PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
     ab6:	c0 9a       	sbi	0x18, 0	; 24
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:49
  PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
     ab8:	c2 9a       	sbi	0x18, 2	; 24
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:51
  
  DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
     aba:	ba 9a       	sbi	0x17, 2	; 23
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:52
  DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
     abc:	b8 9a       	sbi	0x17, 0	; 23
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:54
  
  USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	8f b9       	out	0x0f, r24	; 15
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:55
  USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
     ac2:	8a e2       	ldi	r24, 0x2A	; 42
     ac4:	8d b9       	out	0x0d, r24	; 13
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/USI_TWI_Master.cpp:59
              (1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
              (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
              (0<<USITC);
  USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
     ac6:	80 ef       	ldi	r24, 0xF0	; 240
     ac8:	8e b9       	out	0x0e, r24	; 14
aquire():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:172
  else battery = 1;
}

void aquire() {
  ///////////////////// aquire data  ///////////////////////////////////////////
  if (!(transmitCnt % 5)) { // every 5 passes check the battery
     aca:	35 e0       	ldi	r19, 0x05	; 5
     acc:	d3 2e       	mov	r13, r19
getCelsiusHundredths():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:49

int SI7021::getCelsiusHundredths() {
    byte tempbytes[2];
    _command(TEMP_READ, tempbytes);
    long tempraw = (long)tempbytes[0] << 8 | tempbytes[1];
    return (((17572 * tempraw) >> 16) - 4685) / 10;
     ace:	4a e0       	ldi	r20, 0x0A	; 10
     ad0:	44 2e       	mov	r4, r20
     ad2:	51 2c       	mov	r5, r1
     ad4:	61 2c       	mov	r6, r1
     ad6:	71 2c       	mov	r7, r1
random():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/WMath.cpp:42
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
     ad8:	56 e0       	ldi	r21, 0x06	; 6
     ada:	85 2e       	mov	r8, r21
     adc:	91 2c       	mov	r9, r1
     ade:	a1 2c       	mov	r10, r1
     ae0:	b1 2c       	mov	r11, r1
aquire():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:172
     ae2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <transmitCnt>
     ae6:	6d 2d       	mov	r22, r13
     ae8:	70 d2       	rcall	.+1248   	; 0xfca <__udivmodqi4>
     aea:	91 11       	cpse	r25, r1
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <main+0x9c>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:173
    checkBattery(); // this also updates vcc
     aee:	3d dc       	rcall	.-1926   	; 0x36a <checkBattery()>
_command():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:76
    long humraw = (long)humbytes[0] << 8 | humbytes[1];
    return ((12500 * humraw) >> 16) - 600;
}

void SI7021::_command(byte * cmd, byte * buf ) {
    _writeReg(cmd, sizeof cmd);
     af0:	80 e6       	ldi	r24, 0x60	; 96
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	d6 dd       	rcall	.-1108   	; 0x6a2 <SI7021::_writeReg(unsigned char*, int) [clone .constprop.20]>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:77
    _readReg(buf, sizeof buf);
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	f0 dd       	rcall	.-1056   	; 0x6dc <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]>
getCelsiusHundredths():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:49

int SI7021::getCelsiusHundredths() {
    byte tempbytes[2];
    _command(TEMP_READ, tempbytes);
    long tempraw = (long)tempbytes[0] << 8 | tempbytes[1];
    return (((17572 * tempraw) >> 16) - 4685) / 10;
     afc:	69 81       	ldd	r22, Y+1	; 0x01
     afe:	7a 81       	ldd	r23, Y+2	; 0x02
     b00:	76 27       	eor	r23, r22
     b02:	67 27       	eor	r22, r23
     b04:	76 27       	eor	r23, r22
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	24 ea       	ldi	r18, 0xA4	; 164
     b0c:	34 e4       	ldi	r19, 0x44	; 68
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	ef d1       	rcall	.+990    	; 0xef2 <__mulsi3>
     b14:	bc 01       	movw	r22, r24
     b16:	99 27       	eor	r25, r25
     b18:	77 fd       	sbrc	r23, 7
     b1a:	90 95       	com	r25
     b1c:	89 2f       	mov	r24, r25
     b1e:	6d 54       	subi	r22, 0x4D	; 77
     b20:	72 41       	sbci	r23, 0x12	; 18
     b22:	81 09       	sbc	r24, r1
     b24:	91 09       	sbc	r25, r1
     b26:	a3 01       	movw	r20, r6
     b28:	92 01       	movw	r18, r4
     b2a:	fc d1       	rcall	.+1016   	; 0xf24 <__divmodsi4>
aquire():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:175
  }
  tempVal = sensor.getCelsiusHundredths();
     b2c:	30 93 b5 00 	sts	0x00B5, r19	; 0x8000b5 <tempVal+0x1>
     b30:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <tempVal>
_command():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:76
    long humraw = (long)humbytes[0] << 8 | humbytes[1];
    return ((12500 * humraw) >> 16) - 600;
}

void SI7021::_command(byte * cmd, byte * buf ) {
    _writeReg(cmd, sizeof cmd);
     b34:	81 e6       	ldi	r24, 0x61	; 97
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	b4 dd       	rcall	.-1176   	; 0x6a2 <SI7021::_writeReg(unsigned char*, int) [clone .constprop.20]>
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:77
    _readReg(buf, sizeof buf);
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	ce dd       	rcall	.-1124   	; 0x6dc <SI7021::_readReg(unsigned char*, int) [clone .constprop.14]>
getHumidityPercent():
C:\Users\UB\AppData\Local\Temp\arduino_build_506887\sketch/SI7021.cpp:64

unsigned int SI7021::getHumidityPercent() {
    byte humbytes[2];
    _command(RH_READ, humbytes);
    long humraw = (long)humbytes[0] << 8 | humbytes[1];
    return (((1250 * humraw) >> 16) - 60);
     b40:	69 81       	ldd	r22, Y+1	; 0x01
     b42:	7a 81       	ldd	r23, Y+2	; 0x02
     b44:	76 27       	eor	r23, r22
     b46:	67 27       	eor	r22, r23
     b48:	76 27       	eor	r23, r22
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	22 ee       	ldi	r18, 0xE2	; 226
     b50:	34 e0       	ldi	r19, 0x04	; 4
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	cd d1       	rcall	.+922    	; 0xef2 <__mulsi3>
aquire():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:177
  humVal = sensor.getHumidityPercent();
  tempVal = (uint16_t)(tempVal + 0x8000);
     b58:	00 91 b4 00 	lds	r16, 0x00B4	; 0x8000b4 <tempVal>
     b5c:	10 91 b5 00 	lds	r17, 0x00B5	; 0x8000b5 <tempVal+0x1>
     b60:	10 58       	subi	r17, 0x80	; 128
     b62:	10 93 b5 00 	sts	0x00B5, r17	; 0x8000b5 <tempVal+0x1>
     b66:	00 93 b4 00 	sts	0x00B4, r16	; 0x8000b4 <tempVal>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:178
  humVal = (uint16_t)(humVal + 0x8000);
     b6a:	7c 01       	movw	r14, r24
     b6c:	2c e3       	ldi	r18, 0x3C	; 60
     b6e:	e2 1a       	sub	r14, r18
     b70:	20 e8       	ldi	r18, 0x80	; 128
     b72:	f2 0a       	sbc	r15, r18
     b74:	f0 92 af 00 	sts	0x00AF, r15	; 0x8000af <humVal+0x1>
     b78:	e0 92 ae 00 	sts	0x00AE, r14	; 0x8000ae <humVal>
transmit():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:194
  static uint16_t old_tempVal;
  static uint16_t old_humVal;
  ////////////////// transmitt data  ///////////////////////////////////////////
  //  digitalWrite(PWRTRANSMITTER,1); //power supply for transmitter on digital pin
  // Send only if a sensor has updated Information, or every 5. transmission
  if ((old_tempVal != tempVal) || (transmitCnt % 5 == 0))
     b7c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <transmit()::old_tempVal>
     b80:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <transmit()::old_tempVal+0x1>
     b84:	80 17       	cp	r24, r16
     b86:	91 07       	cpc	r25, r17
     b88:	31 f4       	brne	.+12     	; 0xb96 <main+0x142>
     b8a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <transmitCnt>
     b8e:	6d 2d       	mov	r22, r13
     b90:	1c d2       	rcall	.+1080   	; 0xfca <__udivmodqi4>
     b92:	91 11       	cpse	r25, r1
     b94:	08 c0       	rjmp	.+16     	; 0xba6 <main+0x152>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:195
    temp.send(tempVal, battery, trigger);//(value[16bit], battery[2bit], trigger[1bit])
     b96:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <trigger>
     b9a:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <battery>
     b9e:	b8 01       	movw	r22, r16
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	5c dc       	rcall	.-1864   	; 0x45e <asTransmitter::send(unsigned int, unsigned char, bool)>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:196
  old_tempVal = tempVal;
     ba6:	10 93 b7 00 	sts	0x00B7, r17	; 0x8000b7 <transmit()::old_tempVal+0x1>
     baa:	00 93 b6 00 	sts	0x00B6, r16	; 0x8000b6 <transmit()::old_tempVal>
     bae:	10 91 b3 00 	lds	r17, 0x00B3	; 0x8000b3 <transmitCnt>
     bb2:	81 2f       	mov	r24, r17
     bb4:	6d 2d       	mov	r22, r13
     bb6:	09 d2       	rcall	.+1042   	; 0xfca <__udivmodqi4>
     bb8:	09 2f       	mov	r16, r25
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:197
  if ((old_humVal != humVal) || (transmitCnt % 5 == 0))
     bba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <transmit()::old_humVal>
     bbe:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <transmit()::old_humVal+0x1>
     bc2:	8e 15       	cp	r24, r14
     bc4:	9f 05       	cpc	r25, r15
     bc6:	11 f4       	brne	.+4      	; 0xbcc <main+0x178>
     bc8:	01 11       	cpse	r16, r1
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <main+0x188>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:198
    hum.send(humVal, battery, trigger);//(value[16bit], battery[2bit], trigger[1bit])
     bcc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <trigger>
     bd0:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <battery>
     bd4:	b7 01       	movw	r22, r14
     bd6:	86 ef       	ldi	r24, 0xF6	; 246
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	41 dc       	rcall	.-1918   	; 0x45e <asTransmitter::send(unsigned int, unsigned char, bool)>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:199
  old_humVal = humVal;
     bdc:	f0 92 b1 00 	sts	0x00B1, r15	; 0x8000b1 <transmit()::old_humVal+0x1>
     be0:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <transmit()::old_humVal>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:201
  // Update Battery every 5. Transmission because this will change always we do not check for changed value
  if (transmitCnt % 5 == 0)
     be4:	01 11       	cpse	r16, r1
     be6:	0b c0       	rjmp	.+22     	; 0xbfe <main+0x1aa>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:202
    voltage.send(vcc, battery, trigger);//(value[16bit], battery[2bit], trigger[1bit])
     be8:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <vcc>
     bec:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <vcc+0x1>
     bf0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <trigger>
     bf4:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <battery>
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	30 dc       	rcall	.-1952   	; 0x45e <asTransmitter::send(unsigned int, unsigned char, bool)>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:203
  ++transmitCnt;
     bfe:	1f 5f       	subi	r17, 0xFF	; 255
     c00:	10 93 b3 00 	sts	0x00B3, r17	; 0x8000b3 <transmitCnt>
sleep():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:210
}

void sleep() {
  ///////////////////////// go sleep  ///////////////////////////////////////////
#ifdef POWERDOWN
  setup_watchdog(WDTO_8S); // Take longest sleep mode (8 seconds sleep) to reduce wakeups
     c04:	89 e0       	ldi	r24, 0x09	; 9
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	74 db       	rcall	.-2328   	; 0x2f2 <setup_watchdog(int)>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:215
#endif
  for (uint8_t i = 0; i < 6; i++) // => 48 S + random 30ms to 2 Seconds + 8 S = 58 S max
  {
#ifdef POWERDOWN
    system_sleep();
     c0a:	8d db       	rcall	.-2278   	; 0x326 <system_sleep()>
     c0c:	8c db       	rcall	.-2280   	; 0x326 <system_sleep()>
     c0e:	8b db       	rcall	.-2282   	; 0x326 <system_sleep()>
     c10:	8a db       	rcall	.-2284   	; 0x326 <system_sleep()>
     c12:	89 db       	rcall	.-2286   	; 0x326 <system_sleep()>
     c14:	88 db       	rcall	.-2288   	; 0x326 <system_sleep()>
random():
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/WMath.cpp:42
     c16:	b1 d0       	rcall	.+354    	; 0xd7a <random>
     c18:	a5 01       	movw	r20, r10
     c1a:	94 01       	movw	r18, r8
     c1c:	83 d1       	rcall	.+774    	; 0xf24 <__divmodsi4>
C:\Users\UB\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.4.0\cores\tiny/WMath.cpp:51
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	a1 1d       	adc	r26, r1
     c26:	b1 1d       	adc	r27, r1
sleep():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:222
    delay(random(8000));
#endif
  }
  // generate some random time to avoid sending at fix intervals
#ifdef POWERDOWN
  setup_watchdog(random(1, 7)); // 30ms to 2 Seconds extra Delay to get some variation between transmissions
     c28:	64 db       	rcall	.-2360   	; 0x2f2 <setup_watchdog(int)>
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:223
  system_sleep();
     c2a:	7d db       	rcall	.-2310   	; 0x326 <system_sleep()>
loop():
N:\AVR\Arduino\ArduinoSensor - Kopie (3)\SensorTransmitter\Examples\attiny_demo_Si7021/attiny_demo_Si7021.ino:138
// possible sleep time: 15MS, 30MS, 60MS, 120MS, 250MS, 500MS, 1S, 2S, 4S, 8S
void loop() {
  aquire();
  transmit();
  sleep();
  trigger = 0; //after first run, this will remain 0 (automatic) => on reset button, trigger will show manual
     c2c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <trigger>
     c30:	58 cf       	rjmp	.-336    	; 0xae2 <main+0x8e>

00000c32 <do_rand>:
do_rand():
     c32:	8f 92       	push	r8
     c34:	9f 92       	push	r9
     c36:	af 92       	push	r10
     c38:	bf 92       	push	r11
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
     c48:	68 81       	ld	r22, Y
     c4a:	79 81       	ldd	r23, Y+1	; 0x01
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	9b 81       	ldd	r25, Y+3	; 0x03
     c50:	61 15       	cp	r22, r1
     c52:	71 05       	cpc	r23, r1
     c54:	81 05       	cpc	r24, r1
     c56:	91 05       	cpc	r25, r1
     c58:	21 f4       	brne	.+8      	; 0xc62 <do_rand+0x30>
     c5a:	64 e2       	ldi	r22, 0x24	; 36
     c5c:	79 ed       	ldi	r23, 0xD9	; 217
     c5e:	8b e5       	ldi	r24, 0x5B	; 91
     c60:	97 e0       	ldi	r25, 0x07	; 7
     c62:	2d e1       	ldi	r18, 0x1D	; 29
     c64:	33 ef       	ldi	r19, 0xF3	; 243
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	5c d1       	rcall	.+696    	; 0xf24 <__divmodsi4>
     c6c:	49 01       	movw	r8, r18
     c6e:	5a 01       	movw	r10, r20
     c70:	27 ea       	ldi	r18, 0xA7	; 167
     c72:	31 e4       	ldi	r19, 0x41	; 65
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	3c d1       	rcall	.+632    	; 0xef2 <__mulsi3>
     c7a:	6b 01       	movw	r12, r22
     c7c:	7c 01       	movw	r14, r24
     c7e:	2c ee       	ldi	r18, 0xEC	; 236
     c80:	34 ef       	ldi	r19, 0xF4	; 244
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	5f ef       	ldi	r21, 0xFF	; 255
     c86:	c5 01       	movw	r24, r10
     c88:	b4 01       	movw	r22, r8
     c8a:	33 d1       	rcall	.+614    	; 0xef2 <__mulsi3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8c 0d       	add	r24, r12
     c92:	9d 1d       	adc	r25, r13
     c94:	ae 1d       	adc	r26, r14
     c96:	bf 1d       	adc	r27, r15
     c98:	b7 ff       	sbrs	r27, 7
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <do_rand+0x70>
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	a1 09       	sbc	r26, r1
     ca0:	b0 48       	sbci	r27, 0x80	; 128
     ca2:	88 83       	st	Y, r24
     ca4:	99 83       	std	Y+1, r25	; 0x01
     ca6:	aa 83       	std	Y+2, r26	; 0x02
     ca8:	bb 83       	std	Y+3, r27	; 0x03
     caa:	9f 77       	andi	r25, 0x7F	; 127
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	08 95       	ret

00000cc2 <rand_r>:
rand_r():
     cc2:	b7 df       	rcall	.-146    	; 0xc32 <do_rand>
     cc4:	08 95       	ret

00000cc6 <rand>:
rand():
     cc6:	83 e6       	ldi	r24, 0x63	; 99
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	b3 df       	rcall	.-154    	; 0xc32 <do_rand>
     ccc:	08 95       	ret

00000cce <srand>:
srand():
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next>
     cd6:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <next+0x1>
     cda:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <next+0x2>
     cde:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <next+0x3>
     ce2:	08 95       	ret

00000ce4 <random_r>:
random_r():
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	68 81       	ld	r22, Y
     cfc:	79 81       	ldd	r23, Y+1	; 0x01
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	61 15       	cp	r22, r1
     d04:	71 05       	cpc	r23, r1
     d06:	81 05       	cpc	r24, r1
     d08:	91 05       	cpc	r25, r1
     d0a:	21 f4       	brne	.+8      	; 0xd14 <random_r+0x30>
     d0c:	64 e2       	ldi	r22, 0x24	; 36
     d0e:	79 ed       	ldi	r23, 0xD9	; 217
     d10:	8b e5       	ldi	r24, 0x5B	; 91
     d12:	97 e0       	ldi	r25, 0x07	; 7
     d14:	2d e1       	ldi	r18, 0x1D	; 29
     d16:	33 ef       	ldi	r19, 0xF3	; 243
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	03 d1       	rcall	.+518    	; 0xf24 <__divmodsi4>
     d1e:	49 01       	movw	r8, r18
     d20:	5a 01       	movw	r10, r20
     d22:	27 ea       	ldi	r18, 0xA7	; 167
     d24:	31 e4       	ldi	r19, 0x41	; 65
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	e3 d0       	rcall	.+454    	; 0xef2 <__mulsi3>
     d2c:	6b 01       	movw	r12, r22
     d2e:	7c 01       	movw	r14, r24
     d30:	2c ee       	ldi	r18, 0xEC	; 236
     d32:	34 ef       	ldi	r19, 0xF4	; 244
     d34:	4f ef       	ldi	r20, 0xFF	; 255
     d36:	5f ef       	ldi	r21, 0xFF	; 255
     d38:	c5 01       	movw	r24, r10
     d3a:	b4 01       	movw	r22, r8
     d3c:	da d0       	rcall	.+436    	; 0xef2 <__mulsi3>
     d3e:	c6 0e       	add	r12, r22
     d40:	d7 1e       	adc	r13, r23
     d42:	e8 1e       	adc	r14, r24
     d44:	f9 1e       	adc	r15, r25
     d46:	f7 fe       	sbrs	r15, 7
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <random_r+0x72>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	c8 1a       	sub	r12, r24
     d4e:	d1 08       	sbc	r13, r1
     d50:	e1 08       	sbc	r14, r1
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	f8 0a       	sbc	r15, r24
     d56:	c8 82       	st	Y, r12
     d58:	d9 82       	std	Y+1, r13	; 0x01
     d5a:	ea 82       	std	Y+2, r14	; 0x02
     d5c:	fb 82       	std	Y+3, r15	; 0x03
     d5e:	c7 01       	movw	r24, r14
     d60:	b6 01       	movw	r22, r12
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	9f 90       	pop	r9
     d76:	8f 90       	pop	r8
     d78:	08 95       	ret

00000d7a <random>:
random():
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <next>
     d8e:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <next+0x1>
     d92:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <next+0x2>
     d96:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <next+0x3>
     d9a:	61 15       	cp	r22, r1
     d9c:	71 05       	cpc	r23, r1
     d9e:	81 05       	cpc	r24, r1
     da0:	91 05       	cpc	r25, r1
     da2:	21 f4       	brne	.+8      	; 0xdac <random+0x32>
     da4:	64 e2       	ldi	r22, 0x24	; 36
     da6:	79 ed       	ldi	r23, 0xD9	; 217
     da8:	8b e5       	ldi	r24, 0x5B	; 91
     daa:	97 e0       	ldi	r25, 0x07	; 7
     dac:	2d e1       	ldi	r18, 0x1D	; 29
     dae:	33 ef       	ldi	r19, 0xF3	; 243
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	b7 d0       	rcall	.+366    	; 0xf24 <__divmodsi4>
     db6:	49 01       	movw	r8, r18
     db8:	5a 01       	movw	r10, r20
     dba:	27 ea       	ldi	r18, 0xA7	; 167
     dbc:	31 e4       	ldi	r19, 0x41	; 65
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	97 d0       	rcall	.+302    	; 0xef2 <__mulsi3>
     dc4:	6b 01       	movw	r12, r22
     dc6:	7c 01       	movw	r14, r24
     dc8:	2c ee       	ldi	r18, 0xEC	; 236
     dca:	34 ef       	ldi	r19, 0xF4	; 244
     dcc:	4f ef       	ldi	r20, 0xFF	; 255
     dce:	5f ef       	ldi	r21, 0xFF	; 255
     dd0:	c5 01       	movw	r24, r10
     dd2:	b4 01       	movw	r22, r8
     dd4:	8e d0       	rcall	.+284    	; 0xef2 <__mulsi3>
     dd6:	c6 0e       	add	r12, r22
     dd8:	d7 1e       	adc	r13, r23
     dda:	e8 1e       	adc	r14, r24
     ddc:	f9 1e       	adc	r15, r25
     dde:	f7 fe       	sbrs	r15, 7
     de0:	06 c0       	rjmp	.+12     	; 0xdee <random+0x74>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	c8 1a       	sub	r12, r24
     de6:	d1 08       	sbc	r13, r1
     de8:	e1 08       	sbc	r14, r1
     dea:	80 e8       	ldi	r24, 0x80	; 128
     dec:	f8 0a       	sbc	r15, r24
     dee:	c0 92 67 00 	sts	0x0067, r12	; 0x800067 <next>
     df2:	d0 92 68 00 	sts	0x0068, r13	; 0x800068 <next+0x1>
     df6:	e0 92 69 00 	sts	0x0069, r14	; 0x800069 <next+0x2>
     dfa:	f0 92 6a 00 	sts	0x006A, r15	; 0x80006a <next+0x3>
     dfe:	c7 01       	movw	r24, r14
     e00:	b6 01       	movw	r22, r12
     e02:	9f 77       	andi	r25, 0x7F	; 127
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	08 95       	ret

00000e16 <srandom>:
srandom():
     e16:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <next>
     e1a:	70 93 68 00 	sts	0x0068, r23	; 0x800068 <next+0x1>
     e1e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <next+0x2>
     e22:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <next+0x3>
     e26:	08 95       	ret

00000e28 <__cmpsf2>:
__cmpsf2():
     e28:	40 d0       	rcall	.+128    	; 0xeaa <__fp_cmp>
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <__cmpsf2+0x6>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	08 95       	ret

00000e30 <__floatunsisf>:
__floatunsisf():
     e30:	e8 94       	clt
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <__floatsisf+0x12>

00000e34 <__floatsisf>:
     e34:	97 fb       	bst	r25, 7
     e36:	3e f4       	brtc	.+14     	; 0xe46 <__floatsisf+0x12>
     e38:	90 95       	com	r25
     e3a:	80 95       	com	r24
     e3c:	70 95       	com	r23
     e3e:	61 95       	neg	r22
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	8f 4f       	sbci	r24, 0xFF	; 255
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	99 23       	and	r25, r25
     e48:	a9 f0       	breq	.+42     	; 0xe74 <__floatsisf+0x40>
     e4a:	f9 2f       	mov	r31, r25
     e4c:	96 e9       	ldi	r25, 0x96	; 150
     e4e:	bb 27       	eor	r27, r27
     e50:	93 95       	inc	r25
     e52:	f6 95       	lsr	r31
     e54:	87 95       	ror	r24
     e56:	77 95       	ror	r23
     e58:	67 95       	ror	r22
     e5a:	b7 95       	ror	r27
     e5c:	f1 11       	cpse	r31, r1
     e5e:	f8 cf       	rjmp	.-16     	; 0xe50 <__floatsisf+0x1c>
     e60:	fa f4       	brpl	.+62     	; 0xea0 <__floatsisf+0x6c>
     e62:	bb 0f       	add	r27, r27
     e64:	11 f4       	brne	.+4      	; 0xe6a <__floatsisf+0x36>
     e66:	60 ff       	sbrs	r22, 0
     e68:	1b c0       	rjmp	.+54     	; 0xea0 <__floatsisf+0x6c>
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <__floatsisf+0x6c>
     e74:	88 23       	and	r24, r24
     e76:	11 f0       	breq	.+4      	; 0xe7c <__floatsisf+0x48>
     e78:	96 e9       	ldi	r25, 0x96	; 150
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <__floatsisf+0x6a>
     e7c:	77 23       	and	r23, r23
     e7e:	21 f0       	breq	.+8      	; 0xe88 <__floatsisf+0x54>
     e80:	9e e8       	ldi	r25, 0x8E	; 142
     e82:	87 2f       	mov	r24, r23
     e84:	76 2f       	mov	r23, r22
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <__floatsisf+0x5e>
     e88:	66 23       	and	r22, r22
     e8a:	71 f0       	breq	.+28     	; 0xea8 <__floatsisf+0x74>
     e8c:	96 e8       	ldi	r25, 0x86	; 134
     e8e:	86 2f       	mov	r24, r22
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	2a f0       	brmi	.+10     	; 0xea0 <__floatsisf+0x6c>
     e96:	9a 95       	dec	r25
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	da f7       	brpl	.-10     	; 0xe96 <__floatsisf+0x62>
     ea0:	88 0f       	add	r24, r24
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <__fp_cmp>:
__fp_cmp():
     eaa:	99 0f       	add	r25, r25
     eac:	00 08       	sbc	r0, r0
     eae:	55 0f       	add	r21, r21
     eb0:	aa 0b       	sbc	r26, r26
     eb2:	e0 e8       	ldi	r30, 0x80	; 128
     eb4:	fe ef       	ldi	r31, 0xFE	; 254
     eb6:	16 16       	cp	r1, r22
     eb8:	17 06       	cpc	r1, r23
     eba:	e8 07       	cpc	r30, r24
     ebc:	f9 07       	cpc	r31, r25
     ebe:	c0 f0       	brcs	.+48     	; 0xef0 <__fp_cmp+0x46>
     ec0:	12 16       	cp	r1, r18
     ec2:	13 06       	cpc	r1, r19
     ec4:	e4 07       	cpc	r30, r20
     ec6:	f5 07       	cpc	r31, r21
     ec8:	98 f0       	brcs	.+38     	; 0xef0 <__fp_cmp+0x46>
     eca:	62 1b       	sub	r22, r18
     ecc:	73 0b       	sbc	r23, r19
     ece:	84 0b       	sbc	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	39 f4       	brne	.+14     	; 0xee2 <__fp_cmp+0x38>
     ed4:	0a 26       	eor	r0, r26
     ed6:	61 f0       	breq	.+24     	; 0xef0 <__fp_cmp+0x46>
     ed8:	23 2b       	or	r18, r19
     eda:	24 2b       	or	r18, r20
     edc:	25 2b       	or	r18, r21
     ede:	21 f4       	brne	.+8      	; 0xee8 <__fp_cmp+0x3e>
     ee0:	08 95       	ret
     ee2:	0a 26       	eor	r0, r26
     ee4:	09 f4       	brne	.+2      	; 0xee8 <__fp_cmp+0x3e>
     ee6:	a1 40       	sbci	r26, 0x01	; 1
     ee8:	a6 95       	lsr	r26
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	81 1d       	adc	r24, r1
     eee:	81 1d       	adc	r24, r1
     ef0:	08 95       	ret

00000ef2 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:445
     ef2:	ee 27       	eor	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:446
     ef4:	ff 27       	eor	r31, r31

00000ef6 <__mulsi3_helper>:
__mulsi3_helper():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:451
     ef6:	aa 27       	eor	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:452
     ef8:	bb 27       	eor	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:453
     efa:	08 c0       	rjmp	.+16     	; 0xf0c <__mulsi3_helper+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:457
     efc:	a2 0f       	add	r26, r18
     efe:	b3 1f       	adc	r27, r19
     f00:	e4 1f       	adc	r30, r20
     f02:	f5 1f       	adc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:460
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	44 1f       	adc	r20, r20
     f0a:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:463
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:465
     f14:	98 f3       	brcs	.-26     	; 0xefc <__mulsi3_helper+0x6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:467
     f16:	70 40       	sbci	r23, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:468
     f18:	a9 f7       	brne	.-22     	; 0xf04 <__mulsi3_helper+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:469
     f1a:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:470
     f1c:	99 f7       	brne	.-26     	; 0xf04 <__mulsi3_helper+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:473
     f1e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:474
     f20:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:480
     f22:	08 95       	ret

00000f24 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
     f24:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
     f26:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
     f28:	16 f4       	brtc	.+4      	; 0xf2e <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
     f2a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
     f2c:	0f d0       	rcall	.+30     	; 0xf4c <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
     f2e:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
     f30:	05 d0       	rcall	.+10     	; 0xf3c <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
     f32:	14 d0       	rcall	.+40     	; 0xf5c <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
     f34:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
     f36:	02 d0       	rcall	.+4      	; 0xf3c <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
     f38:	46 f4       	brtc	.+16     	; 0xf4a <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
     f3a:	08 c0       	rjmp	.+16     	; 0xf4c <__negsi2>

00000f3c <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
     f3c:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
     f3e:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
     f40:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
     f42:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
     f46:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
     f48:	5f 4f       	sbci	r21, 0xFF	; 255

00000f4a <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
     f4a:	08 95       	ret

00000f4c <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
     f4c:	90 95       	com	r25
     f4e:	80 95       	com	r24
     f50:	70 95       	com	r23
     f52:	61 95       	neg	r22
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
     f5a:	08 95       	ret

00000f5c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
     f5c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
     f5e:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
     f60:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
     f62:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
     f64:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <__udivmodsi4_ep>

00000f68 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
     f68:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
     f6a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
     f6c:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
     f6e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
     f70:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
     f72:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
     f74:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
     f76:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
     f7a:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
     f7c:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
     f7e:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
     f80:	f5 0b       	sbc	r31, r21

00000f82 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
     f82:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
     f84:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
     f86:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
     f88:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
     f8a:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
     f8c:	69 f7       	brne	.-38     	; 0xf68 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
     f8e:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
     f90:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
     f92:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
     f94:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
     f96:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
     f98:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
     f9a:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
     f9c:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
     f9e:	08 95       	ret

00000fa0 <__gesf2>:
__gesf2():
     fa0:	84 df       	rcall	.-248    	; 0xeaa <__fp_cmp>
     fa2:	08 f4       	brcc	.+2      	; 0xfa6 <__gesf2+0x6>
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	08 95       	ret

00000fa8 <__mulhi3>:
__mulhi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:312
     fa8:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:313
     faa:	55 27       	eor	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:314
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <__mulhi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:317
     fae:	08 0e       	add	r0, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:318
     fb0:	59 1f       	adc	r21, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:320
     fb2:	88 0f       	add	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:321
     fb4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:324
     fb6:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:325
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__mulhi3+0x1c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:328
     fba:	76 95       	lsr	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:329
     fbc:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:331
     fbe:	b8 f3       	brcs	.-18     	; 0xfae <__mulhi3+0x6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:335
     fc0:	71 05       	cpc	r23, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:337
     fc2:	b9 f7       	brne	.-18     	; 0xfb2 <__mulhi3+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:340
     fc4:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:341
     fc6:	95 2f       	mov	r25, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:342
     fc8:	08 95       	ret

00000fca <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
     fca:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
     fcc:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <__udivmodqi4_ep>

00000fd0 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
     fd0:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
     fd2:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
     fd6:	96 1b       	sub	r25, r22

00000fd8 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
     fd8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
     fda:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
     fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
     fde:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
     fe0:	08 95       	ret

00000fe2 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
     fe2:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
     fe4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
     fe6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
     fe8:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
     fea:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
     fec:	09 94       	ijmp

00000fee <calloc>:
calloc():
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	d8 df       	rcall	.-80     	; 0xfa8 <__mulhi3>
     ff8:	8c 01       	movw	r16, r24
     ffa:	0d d0       	rcall	.+26     	; 0x1016 <malloc>
     ffc:	ec 01       	movw	r28, r24
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	21 f0       	breq	.+8      	; 0x100a <calloc+0x1c>
    1002:	a8 01       	movw	r20, r16
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	2b d1       	rcall	.+598    	; 0x1260 <memset>
    100a:	ce 01       	movw	r24, r28
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <malloc>:
malloc():
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	91 05       	cpc	r25, r1
    1022:	10 f4       	brcc	.+4      	; 0x1028 <malloc+0x12>
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <__flp>
    102c:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <__flp+0x1>
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	30 97       	sbiw	r30, 0x00	; 0
    103a:	99 f4       	brne	.+38     	; 0x1062 <malloc+0x4c>
    103c:	21 15       	cp	r18, r1
    103e:	31 05       	cpc	r19, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <malloc+0x2e>
    1042:	4a c0       	rjmp	.+148    	; 0x10d8 <malloc+0xc2>
    1044:	28 1b       	sub	r18, r24
    1046:	39 0b       	sbc	r19, r25
    1048:	24 30       	cpi	r18, 0x04	; 4
    104a:	31 05       	cpc	r19, r1
    104c:	d8 f5       	brcc	.+118    	; 0x10c4 <malloc+0xae>
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	61 15       	cp	r22, r1
    1054:	71 05       	cpc	r23, r1
    1056:	89 f1       	breq	.+98     	; 0x10ba <malloc+0xa4>
    1058:	fb 01       	movw	r30, r22
    105a:	93 83       	std	Z+3, r25	; 0x03
    105c:	82 83       	std	Z+2, r24	; 0x02
    105e:	fe 01       	movw	r30, r28
    1060:	11 c0       	rjmp	.+34     	; 0x1084 <malloc+0x6e>
    1062:	40 81       	ld	r20, Z
    1064:	51 81       	ldd	r21, Z+1	; 0x01
    1066:	02 81       	ldd	r16, Z+2	; 0x02
    1068:	13 81       	ldd	r17, Z+3	; 0x03
    106a:	48 17       	cp	r20, r24
    106c:	59 07       	cpc	r21, r25
    106e:	e0 f0       	brcs	.+56     	; 0x10a8 <malloc+0x92>
    1070:	48 17       	cp	r20, r24
    1072:	59 07       	cpc	r21, r25
    1074:	99 f4       	brne	.+38     	; 0x109c <malloc+0x86>
    1076:	10 97       	sbiw	r26, 0x00	; 0
    1078:	61 f0       	breq	.+24     	; 0x1092 <malloc+0x7c>
    107a:	12 96       	adiw	r26, 0x02	; 2
    107c:	0c 93       	st	X, r16
    107e:	12 97       	sbiw	r26, 0x02	; 2
    1080:	13 96       	adiw	r26, 0x03	; 3
    1082:	1c 93       	st	X, r17
    1084:	32 96       	adiw	r30, 0x02	; 2
    1086:	cf 01       	movw	r24, r30
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret
    1092:	00 93 1f 01 	sts	0x011F, r16	; 0x80011f <__flp>
    1096:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <__flp+0x1>
    109a:	f4 cf       	rjmp	.-24     	; 0x1084 <malloc+0x6e>
    109c:	21 15       	cp	r18, r1
    109e:	31 05       	cpc	r19, r1
    10a0:	51 f0       	breq	.+20     	; 0x10b6 <malloc+0xa0>
    10a2:	42 17       	cp	r20, r18
    10a4:	53 07       	cpc	r21, r19
    10a6:	38 f0       	brcs	.+14     	; 0x10b6 <malloc+0xa0>
    10a8:	a9 01       	movw	r20, r18
    10aa:	db 01       	movw	r26, r22
    10ac:	9a 01       	movw	r18, r20
    10ae:	bd 01       	movw	r22, r26
    10b0:	df 01       	movw	r26, r30
    10b2:	f8 01       	movw	r30, r16
    10b4:	c1 cf       	rjmp	.-126    	; 0x1038 <malloc+0x22>
    10b6:	ef 01       	movw	r28, r30
    10b8:	f9 cf       	rjmp	.-14     	; 0x10ac <malloc+0x96>
    10ba:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__flp+0x1>
    10be:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <__flp>
    10c2:	cd cf       	rjmp	.-102    	; 0x105e <malloc+0x48>
    10c4:	fe 01       	movw	r30, r28
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	81 93       	st	Z+, r24
    10cc:	91 93       	st	Z+, r25
    10ce:	22 50       	subi	r18, 0x02	; 2
    10d0:	31 09       	sbc	r19, r1
    10d2:	39 83       	std	Y+1, r19	; 0x01
    10d4:	28 83       	st	Y, r18
    10d6:	d7 cf       	rjmp	.-82     	; 0x1086 <malloc+0x70>
    10d8:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <__brkval>
    10dc:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__brkval+0x1>
    10e0:	23 2b       	or	r18, r19
    10e2:	41 f4       	brne	.+16     	; 0x10f4 <malloc+0xde>
    10e4:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <__malloc_heap_start>
    10e8:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <__malloc_heap_start+0x1>
    10ec:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <__brkval+0x1>
    10f0:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <__brkval>
    10f4:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <__malloc_heap_end>
    10f8:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <__malloc_heap_end+0x1>
    10fc:	21 15       	cp	r18, r1
    10fe:	31 05       	cpc	r19, r1
    1100:	41 f4       	brne	.+16     	; 0x1112 <malloc+0xfc>
    1102:	2d b7       	in	r18, 0x3d	; 61
    1104:	3e b7       	in	r19, 0x3e	; 62
    1106:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <__malloc_margin>
    110a:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <__malloc_margin+0x1>
    110e:	24 1b       	sub	r18, r20
    1110:	35 0b       	sbc	r19, r21
    1112:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <__brkval>
    1116:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <__brkval+0x1>
    111a:	e2 17       	cp	r30, r18
    111c:	f3 07       	cpc	r31, r19
    111e:	a0 f4       	brcc	.+40     	; 0x1148 <malloc+0x132>
    1120:	2e 1b       	sub	r18, r30
    1122:	3f 0b       	sbc	r19, r31
    1124:	28 17       	cp	r18, r24
    1126:	39 07       	cpc	r19, r25
    1128:	78 f0       	brcs	.+30     	; 0x1148 <malloc+0x132>
    112a:	ac 01       	movw	r20, r24
    112c:	4e 5f       	subi	r20, 0xFE	; 254
    112e:	5f 4f       	sbci	r21, 0xFF	; 255
    1130:	24 17       	cp	r18, r20
    1132:	35 07       	cpc	r19, r21
    1134:	48 f0       	brcs	.+18     	; 0x1148 <malloc+0x132>
    1136:	4e 0f       	add	r20, r30
    1138:	5f 1f       	adc	r21, r31
    113a:	50 93 1e 01 	sts	0x011E, r21	; 0x80011e <__brkval+0x1>
    113e:	40 93 1d 01 	sts	0x011D, r20	; 0x80011d <__brkval>
    1142:	81 93       	st	Z+, r24
    1144:	91 93       	st	Z+, r25
    1146:	9f cf       	rjmp	.-194    	; 0x1086 <malloc+0x70>
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	e0 e0       	ldi	r30, 0x00	; 0
    114c:	9c cf       	rjmp	.-200    	; 0x1086 <malloc+0x70>

0000114e <free>:
free():
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	e9 f0       	breq	.+58     	; 0x1190 <free+0x42>
    1156:	fc 01       	movw	r30, r24
    1158:	32 97       	sbiw	r30, 0x02	; 2
    115a:	13 82       	std	Z+3, r1	; 0x03
    115c:	12 82       	std	Z+2, r1	; 0x02
    115e:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <__flp>
    1162:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <__flp+0x1>
    1166:	ed 01       	movw	r28, r26
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	10 97       	sbiw	r26, 0x00	; 0
    116e:	a1 f4       	brne	.+40     	; 0x1198 <free+0x4a>
    1170:	20 81       	ld	r18, Z
    1172:	31 81       	ldd	r19, Z+1	; 0x01
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <__brkval>
    117c:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__brkval+0x1>
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	09 f0       	breq	.+2      	; 0x1188 <free+0x3a>
    1186:	61 c0       	rjmp	.+194    	; 0x124a <free+0xfc>
    1188:	f0 93 1e 01 	sts	0x011E, r31	; 0x80011e <__brkval+0x1>
    118c:	e0 93 1d 01 	sts	0x011D, r30	; 0x80011d <__brkval>
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret
    1196:	ea 01       	movw	r28, r20
    1198:	ce 17       	cp	r28, r30
    119a:	df 07       	cpc	r29, r31
    119c:	e8 f5       	brcc	.+122    	; 0x1218 <free+0xca>
    119e:	4a 81       	ldd	r20, Y+2	; 0x02
    11a0:	5b 81       	ldd	r21, Y+3	; 0x03
    11a2:	9e 01       	movw	r18, r28
    11a4:	41 15       	cp	r20, r1
    11a6:	51 05       	cpc	r21, r1
    11a8:	b1 f7       	brne	.-20     	; 0x1196 <free+0x48>
    11aa:	e9 01       	movw	r28, r18
    11ac:	fb 83       	std	Y+3, r31	; 0x03
    11ae:	ea 83       	std	Y+2, r30	; 0x02
    11b0:	49 91       	ld	r20, Y+
    11b2:	59 91       	ld	r21, Y+
    11b4:	c4 0f       	add	r28, r20
    11b6:	d5 1f       	adc	r29, r21
    11b8:	ec 17       	cp	r30, r28
    11ba:	fd 07       	cpc	r31, r29
    11bc:	61 f4       	brne	.+24     	; 0x11d6 <free+0x88>
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	02 96       	adiw	r24, 0x02	; 2
    11c4:	84 0f       	add	r24, r20
    11c6:	95 1f       	adc	r25, r21
    11c8:	e9 01       	movw	r28, r18
    11ca:	99 83       	std	Y+1, r25	; 0x01
    11cc:	88 83       	st	Y, r24
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	9b 83       	std	Y+3, r25	; 0x03
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	12 96       	adiw	r26, 0x02	; 2
    11dc:	8d 91       	ld	r24, X+
    11de:	9c 91       	ld	r25, X
    11e0:	13 97       	sbiw	r26, 0x03	; 3
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	b9 f5       	brne	.+110    	; 0x1254 <free+0x106>
    11e6:	2d 91       	ld	r18, X+
    11e8:	3c 91       	ld	r19, X
    11ea:	11 97       	sbiw	r26, 0x01	; 1
    11ec:	cd 01       	movw	r24, r26
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <__brkval>
    11f8:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__brkval+0x1>
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	39 f6       	brne	.-114    	; 0x1190 <free+0x42>
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	51 f5       	brne	.+84     	; 0x125a <free+0x10c>
    1206:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__flp+0x1>
    120a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__flp>
    120e:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <__brkval+0x1>
    1212:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <__brkval>
    1216:	bc cf       	rjmp	.-136    	; 0x1190 <free+0x42>
    1218:	d3 83       	std	Z+3, r29	; 0x03
    121a:	c2 83       	std	Z+2, r28	; 0x02
    121c:	40 81       	ld	r20, Z
    121e:	51 81       	ldd	r21, Z+1	; 0x01
    1220:	84 0f       	add	r24, r20
    1222:	95 1f       	adc	r25, r21
    1224:	c8 17       	cp	r28, r24
    1226:	d9 07       	cpc	r29, r25
    1228:	61 f4       	brne	.+24     	; 0x1242 <free+0xf4>
    122a:	4e 5f       	subi	r20, 0xFE	; 254
    122c:	5f 4f       	sbci	r21, 0xFF	; 255
    122e:	88 81       	ld	r24, Y
    1230:	99 81       	ldd	r25, Y+1	; 0x01
    1232:	48 0f       	add	r20, r24
    1234:	59 1f       	adc	r21, r25
    1236:	51 83       	std	Z+1, r21	; 0x01
    1238:	40 83       	st	Z, r20
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	9b 81       	ldd	r25, Y+3	; 0x03
    123e:	93 83       	std	Z+3, r25	; 0x03
    1240:	82 83       	std	Z+2, r24	; 0x02
    1242:	21 15       	cp	r18, r1
    1244:	31 05       	cpc	r19, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <free+0xfc>
    1248:	b0 cf       	rjmp	.-160    	; 0x11aa <free+0x5c>
    124a:	f0 93 20 01 	sts	0x0120, r31	; 0x800120 <__flp+0x1>
    124e:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <__flp>
    1252:	9e cf       	rjmp	.-196    	; 0x1190 <free+0x42>
    1254:	fd 01       	movw	r30, r26
    1256:	dc 01       	movw	r26, r24
    1258:	c0 cf       	rjmp	.-128    	; 0x11da <free+0x8c>
    125a:	13 82       	std	Z+3, r1	; 0x03
    125c:	12 82       	std	Z+2, r1	; 0x02
    125e:	d7 cf       	rjmp	.-82     	; 0x120e <free+0xc0>

00001260 <memset>:
memset():
    1260:	dc 01       	movw	r26, r24
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <memset+0x6>
    1264:	6d 93       	st	X+, r22
    1266:	41 50       	subi	r20, 0x01	; 1
    1268:	50 40       	sbci	r21, 0x00	; 0
    126a:	e0 f7       	brcc	.-8      	; 0x1264 <memset+0x4>
    126c:	08 95       	ret

0000126e <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    126e:	f8 94       	cli

00001270 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1270:	ff cf       	rjmp	.-2      	; 0x1270 <__stop_program>
